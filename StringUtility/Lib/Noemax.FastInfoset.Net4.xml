<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Noemax.FastInfoset.Net4</name>
    </assembly>
    <members>
        <member name="T:Noemax.FastInfoset.FastInfosetCompression">
            <summary>
            Defines the compression algorithm to be used for compressing and decompressing data.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.Deflate">
            <summary>
            DEFLATE compression algorithm.
            </summary>        
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.GZip">
            <summary>
            GZIP compression algorithm.
            </summary>        
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.Lzma">
            <summary>
            LZMA compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.BZip2">
            <summary>
            BZip2 compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.Lzf">
            <summary>
            LZF compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.Lzf3">
            <summary>
            LZF3 compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.Lzf4">
            <summary>
            LZF4 compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap.DEFAULT_INITIAL_CAPACITY">
            <summary> The default initial capacity - MUST be a power of two.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap.MAXIMUM_CAPACITY">
            <summary> The maximum capacity, used if a higher value is implicitly specified
            by either of the constructors with arguments.
            MUST be a power of two.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap.DEFAULT_LOAD_FACTOR">
            <summary> The load factor used when none specified in constructor.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap._size">
            <summary> The number of key-value mappings contained in this identity hash map.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap._threshold">
            <summary> The next size value at which to resize (capacity * load factor).</summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap._loadFactor">
            <summary> The load factor for the hash table.</summary>
        </member>
        <member name="T:Noemax.FastInfoset.IVocabularyProvider">
            <summary>
            Defines the interface for resolving URI references to Fast Infoset vocabularies.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.IVocabularyProvider.ProvideVocabulary(System.String,Noemax.FastInfoset.XmlFastInfosetReader)">
            <summary>
            Resolves the vocabulary URI and, if found, calls the 
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetReader.Vocabulary">Vocabulary</see> method of the specified 
            reader instance.
            </summary>
            <param name="uri">The URI to resolve.</param>
            <param name="reader">The reader to which vocabulary will be provided.</param>
            <remarks>The XmlFastInfosetReader calls this method when an external vocabulary URI is encountered within a document. 
            The implementation of the IVocabularyProvider must resolve the vocabulary URI and, if found, call the 
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetReader.Vocabulary">Vocabulary</see> method of the specified reader instance.
            </remarks> 
        </member>
        <member name="T:Noemax.FastInfoset.OptimizedVocabulary">
            <summary>
            Provides methods and properties to create an optimized Fast Infoset vocabulary.
            </summary>
        </member>
        <member name="T:Noemax.FastInfoset.Vocabulary">
            <summary>
            Provides the base implementation for Fast Infoset vocabularies.
            </summary>
            <remarks>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values added 
            to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.    
            </remarks>
        </member>
        <member name="F:Noemax.FastInfoset.Vocabulary._hasInitialReadOnlyVocabulary">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.Vocabulary._referencedVocabularyURI">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddAttributeName(System.String,System.String,System.String)">
            <summary>
            Adds the attribute qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an attribute namespace.</param>
            <param name="name">The attribute local name.</param>
            <param name="namespaceUri">The namespace URI of an attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddElementName(System.String,System.String,System.String)">
            <summary>
            Adds the element qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an element namespace.</param>
            <param name="name">The local name of the element.</param>
            <param name="namespaceUri">The namespace URI of the element qualified name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddNamespace(System.String)">
            <summary>
            Adds the namespace URI to the vocabulary.
            </summary>        
            <param name="namespaceUri">The namespace URI.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddPrefix(System.String)">
            <summary>
            Adds the prefix to the vocabulary.
            </summary>
            <param name="prefix">The prefix string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddLocalName(System.String)">
            <summary>
            Adds the local name to the vocabulary.
            </summary>
            <param name="name">The local name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddContentString(System.String)">
            <summary>
            Adds the content string to the vocabulary.
            </summary>
            <param name="text">The content string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddAttributeString(System.String)">
            <summary>
            Adds the attribute value string.
            </summary>
            <param name="text">The attribute value string.</param>
        </member>
        <member name="P:Noemax.FastInfoset.Vocabulary.HasInitialVocabulary">
            <summary>
            Specifies whether this vocabulary uses initial read-only vocabulary.
            </summary>
            <returns>true if this vocabulary uses initial read-only vocabulary; false otherwise.</returns>
        </member>
        <member name="P:Noemax.FastInfoset.Vocabulary.HasExternalVocabulary">
            <summary>
            Specifies whether this vocabulary is linked to an external vocabulary.
            </summary>
            <returns>true if this vocabulary is linked to an external vocabulary, false otherwise.</returns>
        </member>
        <member name="P:Noemax.FastInfoset.Vocabulary.ExternalVocabularyURI">
            <summary>
            Specifies the URI to an external vocabulary.
            </summary>        
        </member>
        <member name="M:Noemax.FastInfoset.OptimizedVocabulary.#ctor">
            <summary>
            Creates a new instance of OptimizedVocabulary.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.OptimizedVocabulary.AddAttributeName(System.String,System.String,System.String)">
            <summary>
            Adds the attribute qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an attribute namespace.</param>
            <param name="name">The attribute local name.</param>
            <param name="namespaceUri">The namespace URI of an attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.OptimizedVocabulary.AddElementName(System.String,System.String,System.String)">
            <summary>
            Adds the element qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an element namespace.</param>
            <param name="name">The local name of the element.</param>
            <param name="namespaceUri">The namespace URI of the element qualified name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.OptimizedVocabulary.AddNamespace(System.String)">
            <summary>
            Adds the namespace URI to the vocabulary.
            </summary>        
            <param name="namespaceUri">The namespace URI.</param>
        </member>
        <member name="M:Noemax.FastInfoset.OptimizedVocabulary.AddPrefix(System.String)">
            <summary>
            Adds the prefix to the vocabulary.
            </summary>
            <param name="prefix">The prefix string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.OptimizedVocabulary.AddLocalName(System.String)">
            <summary>
            Adds the local name to the vocabulary.
            </summary>
            <param name="name">The local name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.OptimizedVocabulary.AddContentString(System.String)">
            <summary>
            Adds the content string to the vocabulary.
            </summary>
            <param name="text">The content string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.OptimizedVocabulary.AddAttributeString(System.String)">
            <summary>
            Adds the attribute value string.
            </summary>
            <param name="text">The attribute value string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.OptimizedVocabulary.CreateWriterVocabulary(System.Int32,System.Int32)">
            <summary>
            Creates a new %WriterVocabulary% using optimized string tables of this vocabulary.
            </summary>
            <param name="maxItems">The maximum number of items per table to use.</param>
            <param name="minHitCount">The mimium number of hits per item required to add it into the writer vocabulary.</param>
            <returns>The optimized writer vocabulary.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.OptimizedVocabulary.CreateReaderVocabulary(System.Int32,System.Int32)">
            <summary>
            Creates a new %ReaderVocabulary% using optimized string tables of this vocabulary.
            </summary>
            <param name="maxItems">The maximum number of items per table to use.</param>
            <param name="minHitCount">The mimium number of hits per item required to add it into the writer vocabulary.</param>
            <returns>The optimized writer vocabulary.</returns>
        </member>
        <member name="T:Noemax.FastInfoset.SchemaVocabulary">
            <summary>
            Provides methods and properties for generating a Fast Infoset vocabulary from an XSD schema.
            </summary>
            <remark>
            Values are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            </remark>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.#ctor">
            <summary>
            Initializes a new instance of 
            <see cref="T:Noemax.FastInfoset.SchemaVocabulary">SchemaVocabulary</see> class.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddAttributeName(System.String,System.String,System.String)">
            <summary>
            Adds the attribute qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an attribute namespace.</param>
            <param name="name">The attribute local name.</param>
            <param name="namespaceUri">The namespace URI of an attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddElementName(System.String,System.String,System.String)">
            <summary>
            Adds the element qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an element namespace.</param>
            <param name="name">The local name of the element.</param>
            <param name="namespaceUri">The namespace URI of the element qualified name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddNamespace(System.String)">
            <summary>
            Adds the namespace URI to the vocabulary.
            </summary>        
            <param name="namespaceUri">The namespace URI.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddPrefix(System.String)">
            <summary>
            Adds the prefix to the vocabulary.
            </summary>
            <param name="prefix">The prefix string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddLocalName(System.String)">
            <summary>
            Adds the local name to the vocabulary.
            </summary>
            <param name="name">The local name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddContentString(System.String)">
            <summary>
            Adds the content string to the vocabulary.
            </summary>
            <param name="text">The content string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddAttributeString(System.String)">
            <summary>
            Adds the attribute value string.
            </summary>
            <param name="text">The attribute value string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.FromXmlSerialized(System.Object)">
            <summary>
            Generates a new %SchemaVocabulary% from the schema inferred from XML serialized object. 
            </summary>        
            <returns>The generated vocabulary.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.FromSchemaSet(System.String)">
            <summary>
            Generates a new %SchemaVocabulary% from the XSD schema set. 
            </summary>
            <param name="path">The path to the schema to generate vocabulary from.</param>
            <returns>The generated vocabulary.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.FromSchemaSet(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Generates a new %SchemaVocabulary% from the XSD schema set. 
            </summary>
            <param name="schemaSet">The %XmlSchemaSet% to generate vocabulary from.</param>
            <returns>The generated vocabulary.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.CreateWriterVocabulary">
            <summary>
            Creates a new %WriterVocabulary% from this %SchemaVocabulary% instance.
            </summary>
            <returns>The generated vocabulary</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.CreateReaderVocabulary">
            <summary>
            Creates a new %ReadVocabulary% from this SchemaVocabulary instance.
            </summary>
            <returns>The generated vocabulary.</returns>
            <overloads>
            Creates a new %ReadVocabulary% from this SchemaVocabulary instance.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.CreateWriterVocabulary(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Creates a new %WriterVocabulary% from the specified XSD schema set.
            </summary>
            <param name="schemaSet">The schema set to be used to generate the vocabulary.</param>
            <returns>The generated vocabulary.</returns>
            <overloads>
            Creates a new %WriterVocabulary% from this SchemaVocabulary instance.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.CreateReaderVocabulary(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Creates a new ReaderVocabulary from the specified XSD schema set.
            </summary>
            <param name="schemaSet"></param>
            <returns>The generated vocabulary.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.CopyTo(Noemax.FastInfoset.Vocabulary)">
            <summary>
            Copies all the tables of the current vocabulary into another %Noemax.FastInfoset.Vocabulary%.
            </summary>
            <param name="vocabulary">The vocabulary where to copy all entries too.</param>
        </member>
        <member name="T:Noemax.FastInfoset.VocabularyWriter">
            <summary>
            Provides methods and properties to populate the Fast Infoset vocabulary by writing an XML document.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.#ctor(Noemax.FastInfoset.Vocabulary)">
            <summary>
            Creates a new instance of %VocabualryWriter%.
            </summary>
            <param name="vocabulary">The vocabulary where to write XML data.</param>
            <overloads>
            Creates a new instance of %VocabualryWriter%.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.Close">
            <summary>
            Finalizes writing into vocabulary and closes the %VocabualryWriter%.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.Flush">
            <summary>
            Flushes data into vocabulary.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.LookupPrefix(System.String)">
            <summary>
            Resolves the namespace URI string into corresponding namespace prefix.
            </summary>
            <param name="ns">
            The namespace URI to resolve.
            </param>
            <returns>
            The prefix that corresponds to the specified namespace URI.
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteCData(System.String)">
            <summary>
            Adds the CDATA string to the vocabulary content strings table. 
            </summary>
            <param name="text">The string to add to the vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteCharEntity(System.Char)">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Adds the string of characters to the vocabulary content string table.
            </summary>
            <param name="buffer">The buffer containing characters to add.</param>
            <param name="index">The offset of the first character in buffer.</param>
            <param name="count">The number of characters to add into vocabulary.</param>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteComment(System.String)">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>        
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>        
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteEndAttribute">
            <summary>
            Adds the attribute value to the vocabulary attribute value strings table.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteEndDocument">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>  
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteEndElement">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>  
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteEntityRef(System.String)">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>  
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteFullEndElement">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>  
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>  
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteRaw(System.String)">
            <summary>
            Adds the string the vocabulary content string table.
            </summary>
            <param name="data">
            The string to add to the vocabulary.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            Adds the string of characters to the vocabulary content string table.
            </summary>
            <param name="buffer">The buffer containing characters to add.</param>
            <param name="index">The offset of the first character in buffer.</param>
            <param name="count">The number of characters to add into vocabulary.</param>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            Adds the qualified name of an attribute into the vocabulary.
            </summary>
            <param name="prefix">The prefix of an attribute XML namespace.</param>
            <param name="localName">The attribute local name.</param>
            <param name="ns">The namespace URI.</param>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteStartDocument(System.Boolean)">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>  
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteStartDocument">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>  
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>  
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteString(System.String)">
            <summary>
            Adds the string to the vocabulary content string table.
            </summary>
            <param name="text">The string to into the table.</param>
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>  
        </member>
        <member name="M:Noemax.FastInfoset.VocabularyWriter.WriteWhitespace(System.String)">
            <summary>
            This method does not add anything to the vocabulary.
            </summary>  
        </member>
        <member name="P:Noemax.FastInfoset.VocabularyWriter.WriteState">
            <summary>
            Reports the state of the writer.
            </summary>
        </member>
        <member name="T:Noemax.FastInfoset.XmlFastInfosetFactory">
            <summary>
            Manages %Noemax.FastInfoset.XmlFastInfosetReader% and %Noemax.FastInfoset.XmlFastInfosetWriter% objects.
            </summary>
            <remarks>
            The XmlFastInfosetFactory performs pooling of <c>XmlFastInfosetReader</c> and <c>XmlFastInfosetWriter</c> 
            instances to speed up the initialization of these objects.
            </remarks> 
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.#ctor">
            <summary>
            Initializes a new instance of %XmlFastInfosetFactory%.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%. 
            </summary>
            <returns>
            An instance of XmlFastInfosetReader.
            </returns>
            <overloads>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.IO.Stream)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%. 
            </summary>
            <param name="stream">The stream containing the Fast Infoset document.</param>
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.String)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%. 
            </summary>
            <param name="filename">The URI to the file containing the Fast Infoset document</param>                
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.IO.Stream,System.Xml.XmlReaderSettings)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%. 
            </summary>
            <param name="stream">The stream containing the Fast Infoset document.</param>        
            <param name="settings">The XmlReaderSettings object used to configure the new XmlFastInfosetReader instance.</param>
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.String,System.Xml.XmlReaderSettings)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%. 
            </summary>
            <param name="filename">The URI to the file containing the Fast Infoset document</param>        
            <param name="settings">The XmlReaderSettings object used to configure the new XmlFastInfosetReader instance.</param>
            <returns>An instance of %XmlFastInfosetReader%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new or reuses an existing instance of XmlFastInfosetReader. 
            </summary>
            <param name="stream">The stream containing the Fast Infoset document.</param>
            <param name="compression">The compression algorithm to be used to decompress the Fast Infoset document.</param>
            <returns>An instance of %XmlFastInfosetReader%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.String,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new or reuses an existing instance of XmlFastInfosetReader. 
            </summary>
            <param name="filename">The URI to the file containing the Fast Infoset document</param>                
            <param name="compression">The compression algorithm to be used to decompress the Fast Infoset document.</param>
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.IO.Stream,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new or reuses an existing instance of XmlFastInfosetReader. 
            </summary>
            <param name="stream">The stream containing the Fast Infoset document.</param>        
            <param name="settings">The XmlReaderSettings object used to configure the new XmlFastInfosetReader instance.</param>
            <param name="compression">The compression algorithm to be used to decompress the Fast Infoset document.</param>
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.String,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new or reuses an existing instance of XmlFastInfosetReader. 
            </summary>
            <param name="filename">The URI to the file containing the Fast Infoset document</param>        
            <param name="settings">The XmlReaderSettings object used to configure the new XmlFastInfosetReader instance.</param>
            <param name="compression">The compression algorithm to be used to decompress the Fast Infoset document.</param>
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>        
            <returns>An instance of XmlFastInfosetWriter.</returns>
            <overloads>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.IO.Stream)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="stream">The stream to which you want to write.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.String)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="filename"> The URI of the file to write.</param>        
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.IO.Stream,System.Xml.XmlWriterSettings)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="stream">The stream to which you want to write. </param>
            <param name="settings">The XmlWriterSettings object used to configure the new XmlFastInfosetWriter instance.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.String,System.Xml.XmlWriterSettings)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="filename"> The URI of the file to write.</param>    
            <param name="settings">The XmlWriterSettings object used to configure the new XmlFastInfosetWriter instance.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="stream">The stream to which you want to write.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.IO.Stream,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="stream">The stream to which you want to write. </param>
            <param name="settings">The XmlWriterSettings object used to configure the new XmlFastInfosetWriter instance.</param>        
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.String,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary> or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="filename"> The URI of the file to write.</param>                
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.String,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="filename"> The URI of the file to write.</param>    
            <param name="settings">The XmlWriterSettings object used to configure the new XmlFastInfosetWriter instance.</param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="T:Noemax.FastInfoset.XmlFastInfosetReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to Fast
            Infoset encoded XML data.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.IO.Stream)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset 
            encoded XML stream.
            </summary>
            <returns>
            An <strong>XmlReader</strong> object to read the Fast Infoset encoded XML
            data.
            </returns>
            <param name="input">The stream containing the Fast Infoset encoded XML data.</param>
            <overloads>
            Creates a new %XmlReader:T:System.Xml.XmlReader% instance.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.String)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlReader"> XmlReader</see> instance for reading the 
            Fast Infoset encoded XML file.
            </summary>
            <returns>
                An System.Xml.XmlReader object to read the Fast Infoset encoded XML data.        
            </returns>
            <param name="inputFileName">        
                The system path to the file containing the Fast Infoset encoded XML data.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader"> XmlReader</see> instance for reading the Fast Infoset encoded XML stream using an
            <see cref="T:System.Xml.XmlReaderSettings">XmlReaderSettings</see> object.
            </summary>
            <returns>
            An <strong>XmlReader</strong> object to read the FastInfoset encoded XML
            data.
            </returns>
            <param name="input">        
                The stream containing the FastInfoset encoded XML data.
            </param>
            <param name="settings">
            The <strong>XmlReaderSettings</strong> object used to configure the new
            <strong>XmlFastInfosetReader</strong> instance. This value can be null.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.String,System.Xml.XmlReaderSettings)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset encoded XML file using an
            <see cref="T:System.Xml.XmlReaderSettings">XmlReaderSettings</see> object.
            </summary>
            <returns>
                An <strong>XmlReader</strong> object to read the FastInfoset encoded XML data.        
            </returns>
            <param name="inputFileName">The path to the file with the FastInfoset encoded XML data.</param>
            <param name="settings">
                The <see cref="T:System.Xml.XmlReaderSettings"/> to configure the new
                <strong>XmlFastInfosetReader</strong> instance. This value can be
                <strong>null</strong>.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.String,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset encoded XML file using an
            <see cref="T:System.Xml.XmlReaderSettings">XmlReaderSettings</see> object.
            </summary>
            <returns>
                An <strong>XmlReader</strong> object to read the FastInfoset encoded XML data.        
            </returns>
            <param name="inputFileName">The path to the file with the FastInfoset encoded XML data.</param>
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset encoded XML stream.
            </summary>
            <returns>
            An <strong>XmlReader</strong> object to read the Fast Infoset encoded XML
            data.
            </returns>
            <param name="input">The stream containing the Fast Infoset encoded XML data.</param>
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset encoded XML file using an
            <see cref="T:System.Xml.XmlReaderSettings">XmlReaderSettings</see> object.
            </summary>
            <returns>
                An <strong>XmlReader</strong> object to read the FastInfoset encoded XML data.        
            </returns>
            <param name="input"> The stream containing the FastInfoset encoded XML data. </param>
            <param name="settings">
                The <see cref="T:System.Xml.XmlReaderSettings"/> to configure the new
                <strong>XmlFastInfosetReader</strong> instance. This value can be
                <strong>null</strong>.
            </param>
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.String,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset encoded 
            XML file using an <see cref="T:System.Xml.XmlReaderSettings">XmlReaderSettings</see> object.
            </summary>
            <returns>
                An <strong>XmlReader</strong> object to read the FastInfoset encoded XML data.        
            </returns>
            <param name="inputFileName">The path to the file with the FastInfoset encoded XML data.</param>
            <param name="settings">
                The <see cref="T:System.Xml.XmlReaderSettings"/> to configure the new
                <strong>XmlFastInfosetReader</strong> instance. This value can be
                <strong>null</strong>.
            </param>
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>This constructor creates an instance of
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
                which is is not associated with any stream and is intended for reusing the same
                reader for reading more than one stream.</para>
            	<para>If you use this constructor you must initialize the reader by calling
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">Init</see> before using it.</para>
            </remarks>
            <overloads>
            Initializes a new instance of the 
            %XmlFastInfosetReader:T:Noemax.FastInfoset.XmlFastInfosetReader% class.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <param name="input">
            	<para>The stream containing the Fast Infoset encoded XML data to read.</para>
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.#ctor(System.IO.Stream,System.Xml.XmlReaderSettings)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see> class.
            </summary>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>        
            <param name="settings">XmlReaderSettings object to configure the new XmlFastInfosetReader instance.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.#ctor(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <param name="input">
            	<para>The stream containing the Fast Infoset encoded XML data to read.</para>
            </param>        
            <param name="compression">The compression algorithm to be used for decompressing the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.#ctor(System.IO.Stream,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>        
            <param name="settings">XmlReaderSettings object to configure the new XmlFastInfosetReader instance.</param>
            <param name="compression">The compression algorithm to be used for decompressing the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.IO.Stream,System.Xml.XmlReaderSettings)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see> class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided stream as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another stream.</para>
            </remarks>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>
            <param name="settings">The XmlReaderSettings object used to configure the reader.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.IO.Stream,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided stream as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another stream.</para>
            </remarks>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>
            <param name="settings">The XmlReaderSettings object used to configure the reader.</param>
            <param name="compression">The compression algorithm to be used for decompressing the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.IO.Stream)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided stream as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another stream.</para>
            </remarks>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>        
            <overloads>
            Initializes an instance of the %XmlFastInfosetReader:T:Noemax.FastInfoset.XmlFastInfosetReader% class.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided stream as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another stream.</para>
            </remarks>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>    
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.Byte[],System.Int32,System.Int32,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided array of bytes as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another source.</para>
            </remarks>
            <param name="input"><para>The an array of bytes containing the Fast Infoset encoded XML data to read.</para></param>
            <param name="offset"><para>The offset in the array of bytes to start reading from.</para></param>
            <param name="length"><para>The number of byte starting from the offset that contain FastInfoset encoded XML data.</para></param>
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided array of bytes as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another source.</para>
            </remarks>
            <param name="input"><para>The an array of bytes containing the Fast Infoset encoded XML data to read.</para></param>
            <param name="offset"><para>The offset in the array of bytes to start reading from.</para></param>
            <param name="length"><para>The number of byte starting from the offset that contain FastInfoset encoded XML data.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Clear">
            <summary>
            Clears the internal state of the reader.
            </summary>
            <remarks>
            Clears the internal state of the reader. After a call to this method the reader
            remains in an uninitialized state. You must call the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">Init</see>
            method in order to reuse the reader for reading another stream.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.InitializeNameTable">
            <summary>
            Initializes XmlNameTable with default entries.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Close">
            <summary>
            Changes the
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetReader.ReadState">ReadState</see>
            to <strong>Closed</strong>.
            </summary>
            <remarks>
            If
            <see cref="P:System.Xml.XmlReaderSettings.CloseInput">CloseInput</see>
            is true, the underlying stream is going to be closed as well.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of an attribute.
            </summary>
            <returns>The value of the specified attribute.</returns>
            <param name="i">The index of the attribute.</param>
            <overloads>Gets the value of an attribute.</overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.GetAttribute(System.String)">
            <summary>
            Gets the value of an attribute.
            </summary>
            <returns>The value of the specified attribute.</returns>
            <param name="name">The name of an attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of an attribute.
            </summary>
            <returns>The value of the specified attribute.</returns>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.LookupNamespace(System.String)">
            <summary><para>Resolves the namespace prefix in the current element's scope.</para></summary>
            <returns>
            The namespace URI to which the prefix maps or a null reference (<b>Nothing</b> in
            Visual Basic) if no matching prefix is found.
            </returns>
            <param name="prefix">
            The prefix whose namespace URI you want to resolve. To match the default
            namespace, pass an empty string. This string does not have to be atomized.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToAttribute(System.Int32)">
            <summary>Moves to the attribute specified by the index.</summary>
            <overloads>Moves to the specified attribute.</overloads>
            <param name="i">The index of the attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToAttribute(System.String)">
            <summary>Moves to the attribute specified by the qualified name.</summary>
            <returns>
            	<strong>true</strong> if the attribute is found; otherwise, <b>false</b>. If
            <b>false</b>, the reader's position does not change.
            </returns>
            <param name="name">The qualified name of the attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToAttribute(System.String,System.String)">
            <summary>Moves to the attribute specified by the local name and namespace URI.</summary>
            <returns>
            	<strong>true</strong> if the attribute is found; otherwise, <b>false</b>. If
            <b>false</b>, the reader's position does not change.
            </returns>
            <param name="name">The local name of the attribute.</param>
            <param name="ns">The namespace URI of the attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToElement">
            <summary>
            Moves to the element that contains the current attribute node.
            </summary>
            <returns>
            	<strong>true</strong> if the reader is positioned on an attribute (the reader
            moves to the element that owns the attribute); <b>false</b> if the reader is not
            positioned on an attribute (the position of the reader does not change).
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToContent">
            <summary>
            Checks whether the current node is a content (non-white space text, <strong>CDATA</strong>, <strong>Element</strong>,
            <strong>EndElement</strong>, <strong>EntityReference</strong>, or <strong>EndEntity</strong>) node. If the node is 
            not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following 
            type: <strong>ProcessingInstruction</strong>, <strong>DocumentType</strong>, <strong>Comment</strong>,
            <strong>Whitespace</strong>, or <strong>SignificantWhitespace</strong>.
            </summary>
            <returns>
            	<para>The <strong>NodeType</strong> of the current node found by the method or
                <strong> XmlNodeType.None</strong> if the reader has reached the end
                of the input stream.</para>
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute.
            </summary>
            <returns>
            	<strong>true</strong> if an attribute exists (the reader moves to the first
            attribute); otherwise, <b>false</b> (the position of the reader does not
            change).
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>
            	<strong>true</strong> if there is a next attribute; <b>false</b> if there are no
            more attributes.
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAttributeValue">
            <summary>Reads the attribute value.</summary>
            <returns>
            	<strong>true</strong> if there are nodes to return. <b>false</b> if the reader is
            not positioned on an attribute node when the initial call is made or if all the
            attribute values have been read.
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ResetState">
            <summary>
            Resets the
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetReader.ReadState">ReadState</see>
            to <strong>Initial</strong>.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">
            		<b>ResetState</b> enables you to parse multiple
                Fast Infoset documents in a single stream. When you reach the end of a Fast Infoset
                document, you can call <b>ResetState</b> to reset
                the state of the reader in preparation for the next Fast Infoset document.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadBase64">
            <summary>
            Reads a Base64 value from the current position in the element content and decodes it into an array of bytes.
            </summary>
            <returns>An array of bytes read.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">If the node at the current position is Fast
                Infoset binary encoded Base64 bytes, the reader returns these bytes without
                transformation.</para>
            	<para class="Page4Paragraph2Text">If the current node is text, the reader performs
                Base64 decoding and returns the decoded bytes.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadBinHex">
            <summary>
            Reads a hexadecimal value from the current position in the element content and decodes it into an array of bytes.
            </summary>
            <returns>An array of bytes read.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">If the node at the current position is Fast
                Infoset binary encoded BinHex bytes, the reader returns these bytes without
                transformation.</para>
            	<para class="Page4Paragraph2Text">If the current node is text, the reader performs
                BinHex decoding and returns the decoded bytes.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAs``1">
            <summary>
            Reads the value from the current position in the stream as the type
            specified.
            </summary>
            <returns>The value of the type T read from the stream.</returns>
            <remarks>
            If the value in the stream was encoded as a different type, the reader converts
            it to the required type. For example if the stream contains a binary encoded
            <strong>int</strong> value and a <strong>double</strong> value was requested, the
            reader will perform an int to double conversion automatically.
            </remarks>
            <typeparam name="T">The type to which the value read should be converted to.</typeparam>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsInt">
            <summary>
            Reads a single or multiple occurrences of 32-bit integer values from the current
            position.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The
                <b>ReadAsInt</b> method reads a single or multiple integer values from the current 
                position in the content.</para>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The integer
                values must have been encoded using Fast Infoset's binary encoding of integer
                values.</para>
            </remarks>
            <returns>The 32-bit integer values read.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsShort">
            <summary>
            Reads a single or multiple occurrences of 16-bit integer values from the current
            position.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The
                <b>ReadAsShort</b> method reads a single or multiple short integer values from the current 
                position in the content.</para>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The short
                integer values must have been encoded using Fast Infoset's binary encoding of short
                integer values.</para>
            </remarks>
            <returns>The 16-bit integer values read.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsLong">
            <summary>
            Reads a single or multiple occurrences of 64-bit integer values from the current
            position.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The
                <b>ReadAsLong</b> method reads a single or multiple long integer values from the
                current position in the content.</para>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The long
                integer values must have been encoded using Fast Infoset's binary encoding of long
                integer values.</para>
            </remarks>
            <returns><b>The 64-bit integer values read.</b></returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsFloat">
            <summary>
            Reads a single or multiple occurrences of single-precision floating-point values
            from the current position.
            </summary>
            <returns>
            	<b>The single-precision floating-point values read.</b>
            </returns>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The
                <b>ReadAsFloat</b> method reads a single or multiple single values from the current 
                position in the content.</para>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The single
                values must have been encoded using Fast Infoset's binary encoding of single
                values.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsDouble">
            <summary>
            Reads a single or multiple occurrences of double-precision floating-point values
            from the current position.
            </summary>
            <remarks>
            	<para>The <strong>ReadAsDouble</strong> method reads a single or multiple double
                values from the current position in the content.</para>
            	<para>The double values must have been encoded using Fast Infoset's binary encoding
                of double values.</para>
            </remarks>
            <returns>
            	The double-precision floating-point values read.
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsBoolean">
            <summary>
            Reads a single or multiple occurrences of boolean values from the current
            position.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The
                <b>ReadAsBoolean</b> method reads a single or multiple boolean values from the current
                position in the content.</para>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The boolean
                values must have been encoded using Fast Infoset's binary encoding of boolean
                values.</para>
            </remarks>
            <returns>
            	The boolean values read.
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsInt">
            <summary>
            Reads the current element and returns the content as a 32-bit signed
            integer.
            </summary>
            <returns>The element content as a 32-bit signed integer.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded 32-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 32-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsShort">
            <summary>
            Reads the current element and returns the content as a 16-bit signed
            integer.
            </summary>
            <returns><para>The element content as a 16-bit signed integer</para></returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded 16-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 16-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsLong">
            <summary>
            Reads the current element and returns the content as a 64-bit signed
            integer.
            </summary>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded 64-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 64-bit signed integer.</font></para>
            </remarks>
            <returns>The element content as a 64-bit signed integer.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsDouble">
            <summary>
            Reads the current element and returns the content as a double-precision
            floating-point number.
            </summary>
            <returns>The element content as a double-precision floating-point number.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded double-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a double-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsFloat">
            <summary>
            Reads the current element and returns the content as a single-precision
            floating-point number.
            </summary>
            <returns>The element content as a single-precision floating-point number.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded single-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a single-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsBoolean">
            <summary>Reads the current element and returns the content as a boolean value.</summary>
            <returns>The element content as a boolean value.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded boolean value<font color="black">, the
                reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a boolean value.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsDateTime">
            <summary>
            Reads the node content at the current position as a DateTime value. 
            </summary>
            <returns>The element content as a decimal value.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsDecimal">
            <summary>
            Reads the node content at the current position as a decimal value. 
            </summary>
            <returns>The element content as a decimal value.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the binary or BinHex encoded content at the current position and returns
            the decoded binary bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">If the content is binary encoded BinHex bytes,
                the reader returns the bytes read. If the content is text, the reader performs
                BinHex decoding and returns the decoded bytes.</para>
            </remarks>
            <param name="buffer">
            The buffer into which to copy the resulting bytes. This value cannot be a null
            reference (<b>Nothing</b> in Visual Basic).
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned by this method
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the binary or Base64 encoded content at the current position and returns
            the decoded binary bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">If the content is binary encoded Base64 bytes,
                the reader returns the bytes read. If the content is text, the reader performs
                Base64 decoding and returns the decoded bytes.</para>
            </remarks>
            <param name="buffer">
            	<para>The buffer into which to copy the resulting bytes. This value cannot be a
                null reference (<b>Nothing</b> in Visual Basic).</para>
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned by this method.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsBase64">
            <summary>
            Reads the binary or Base64 encoded content at the current position and returns
            the decoded binary bytes.
            </summary>
            <overloads>
            Reads the binary or Base64 encoded content at the current position and returns
            the decoded binary bytes.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsString">
            <summary>Reads the text content at the current position as a string.</summary>
            <returns>
            The node content as <see cref="T:System.String">String</see> object.
            </returns>
            <remarks>
            Implements <see cref="T:System.String">XmlReader.ReadContentString</see>.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsDecimal">
            <summary>
            Reads the text content at the current position as a decimal value<font color="black">.</font>
            </summary>
            <returns><para>The text content as a decimal <font color="black">value.</font></para></returns>
            <remarks><para></para></remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsDateTime">
            <summary>
            Reads the text content at the current position as a DateTime <font color="black">object.</font>
            </summary>
            <returns><para>The text content as a DateTime <font color="black">object.</font></para></returns>
            <remarks>
            Implements <see cref="M:System.Xml.XmlReader.ReadContentAsDateTime">XmlReader.ReadContentAsDateTime</see>.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsDouble">
            <summary>
            Reads the content at the current position as a double-precision floating-point
            number.
            </summary>
            <returns>The content as a double-precision floating-point number.</returns>
            <remarks>
            	<para>If the content is a binary encoded double-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a double-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsBoolean">
            <summary>Reads the content at the current position as a boolean value.</summary>
            <returns>The content as a boolean value.</returns>
            <remarks>
            	<para>If the content is a binary encoded boolean value<font color="black">, the
                reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a boolean value.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsFloat">
            <summary>
            Reads the content at the current position as a single-precision floating point
            number.
            </summary>
            <returns>The content as a single-precision floating-point number.</returns>
            <remarks>
            	<para>If the content is a binary encoded single-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a single-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsInt">
            <summary>Reads the text content at the current position as a 32-bit signed integer.</summary>
            <returns>The content as a 32-bit signed integer.</returns>
            <remarks>
            	<para>If the content is a binary encoded 32-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 32-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsLong">
            <summary>Reads the text content at the current position as a 64-bit signed integer.</summary>
            <returns>The content as a 64-bit signed integer.</returns>
            <remarks>
            	<para>If the content is a binary encoded 64-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 64-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsShort">
            <summary>Reads the text content at the current position as a 16-bit signed integer.</summary>
            <returns>The content as a 16-bit signed integer.</returns>
            <remarks>
            	<para>If the content is a binary encoded 16-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 16-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the binary or Base64 encoded element content and returns the decoded
            bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">This method reads the start tag, the content of
                the element, and moves the reader past the end element tag. It expands entities and
                ignores processing instructions and comments. The element can only contain simple
                content. That is, it cannot have child elements.</para>
            	<para class="Page4Paragraph2Text">If the content is binary encoded Base64 bytes,
                the reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If the content is text, the reader performs
                Base64 decoding and returns the decoded bytes.</para>
            </remarks>
            <param name="buffer">
            The buffer into which to copy the resulting bytes. This value cannot be a null
            reference (<b>Nothing</b> in Visual Basic).
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned from this method.
            </param>
            <overloas>
            Reads the binary or Base64 encoded element content and returns the decoded bytes.
            </overloas>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the binary or BinHex encoded element content and returns the decoded
            bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">This method reads the start tag, the content of
                the element, and moves the reader past the end element tag. It expands entities and
                ignores processing instructions and comments. The element can only contain simple
                content. That is, it cannot have child elements.</para>
            	<para class="Page4Paragraph2Text">If the content is binary encoded BinHex bytes,
                the reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If the content is text, the reader performs
                BinHex decoding and returns the decoded bytes.</para>
            </remarks>
            <param name="buffer">
            The buffer into which to copy the resulting bytes. This value cannot be a null
            reference (<b>Nothing</b> in Visual Basic).
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            	<para>The maximum number of bytes to copy into the buffer. The actual number of
                bytes copied is returned from this method.</para>
            </param>
            <overloads>
            Reads the binary or BinHex encoded element content and returns the decoded bytes.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsBinHex(System.Int32)">
            <summary>
            Reads binary or <strong>BinHex</strong> encoded element content and returns
            decoded bytes.
            </summary>
            <returns>An array with bytes.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">This method reads the start tag, the contents of
                the element, and moves the reader past the end element tag. It expands entities and
                ignores processing instructions and comments. The element can only contain simple
                content. That is, it cannot have child elements.</para>
            	<para class="Page4Paragraph2Text">If content is binary encoded BinHex bytes block,
                reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If content is text, reader performs BinHex
                decoding and returns decoded bytes.</para>
            </remarks>
            <param name="maxArrayLength">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned from this method.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsBase64(System.Int32)">
            <summary>
            Reads binary or <strong>Base64</strong> encoded element content and returns
            decoded bytes.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text">This method reads the start tag, the contents of
                the element, and moves the reader past the end element tag. It expands entities and
                ignores processing instructions and comments. The element can only contain simple
                content. That is, it cannot have child elements.</para>
            	<para class="Page4Paragraph2Text">If content is binary encoded Base64 bytes block,
                reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If content is text, reader performs Base64
                decoding and returns decoded bytes.</para>
            </remarks>
            <returns>An array with bytes.</returns>
            <param name="maxArrayLength">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned from this method.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsString">
            <summary>
            Reads the current element and returns the contents as a <font color="black">
            String object.</font>
            </summary>
            <returns>
            	<para>The element content as a <font color="black">String</font>.</para>
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadString">
            <summary>Reads the contents of the current node into a string.</summary>
            <returns><para>A string that contains the contents of the current node.</para></returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.IsStartElement">
            <summary>Tests if the current content node is a start tag.</summary>
            <returns>
            	<para><c>true</c> if %MoveToContent% finds a start tag or empty element tag; <c>false</c> if a node type other than
                <c>XmlNodeType.Element</c> was found.</para>
            </returns>
            <overloads>Tests if the current content node is a start element.</overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.IsStartElement(System.String,System.String)">
            <summary>Tests if the current content node is a start element with specified name and namespace.</summary>
            <remarks>
            Calls %MoveToContent% and tests if the current content node is a start tag or empty
            element tag and if the local name and namespace of the element found matches the given
            arguments.
            </remarks>
            <returns>
            	<para><c>true</c> if %MoveToContent% finds a start tag or empty element tag; <c>false</c> if a node type other than
                <c>XmlNodeType.Element</c> was found.</para>
            </returns>
            <param name="localname">
            The string to match against the <c>LocalName</c> property of the element
            found.
            </param>
            <param name="ns">
            The string to match against the <c>NamespaceURI</c> property of the element found.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.IsStartElement(System.String)">
            <summary>Tests if the current content node is a start element with specified name and namespace.</summary>
            <remarks>
            Calls %MoveToContent% and tests if the current content node is a start tag or empty
            element tag and if the local name and namespace of the element found matches the given
            arguments.
            </remarks>
            <returns>
            	<para><c>true</c> if %MoveToContent% finds a start tag or empty element tag; <c>false</c> if a node type other than
                <c>XmlNodeType.Element</c> was found.</para>
            </returns>
            <param name="name"> The string to match against the <c>Name</c> property of the element found.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadStartElement(System.String,System.String)">
            <summary>
            Checks that the current node is the element with specified local name and namespace and advances the reader to the next node.
            </summary>
            <param name="localname">The local name of the specified element</param>
            <param name="ns">The namespace of specified element</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadStartElement(System.String)">
            <summary>
            Checks that the current node is the element with specified qualified name and advances the reader to the next node.
            </summary>
            <param name="name">The name of specified element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadStartElement">
            <summary>
            Checks that the current node is an element and advances the reader to the next node.
            </summary>
            <overloads>
            Checks that the current node is an element and advances the reader to the next node.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadEndElement">
            <summary>
            Checks that the current content node is an end tag and advances the reader to the
            next node.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>
            	<strong>true</strong> if the next node was read successfully; <b>false</b> if
            there are no more nodes to read.
            </returns>
            <remarks>
            	<para>When an <b>XmlFastInfosetReader</b> is first created and initialized, there
                is no information available. You must call <b>Read</b> to read the first
                node.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ResolveEntity">
            <summary>Throws a <strong>NotSupportedException</strong>.</summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Settings">
            <summary>
            Gets the XmlReaderSettings object used to create this XmlFastInfosetReader instance.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.AttributeCount">
            <summary>
            Gets the number of attributes on the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.BaseURI">
            <summary>
            Gets the base URI of the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.CanReadBinaryContent">
            <summary>
            Gets a value indicating whether this reader can parse binary content.
            Always returns <strong>true</strong>.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.CanResolveEntity">
            <summary>
            Gets a value indicating whether this reader can parse and resolve entities.
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Data">
            <summary>
            Gets the content of the current node decoded into the same data type it was written as.
            </summary>
            <remarks>
            If reader positioned on the binary encoded content <strong>Data</strong> contains
            an array containing the values of Fast Infoset supported data type, otherwise
            text.
            </remarks>    
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Depth">
            <summary>
            Gets the depth of the current node in the XML document.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.EOF">
            <summary>
            Gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.HasValue">
            <summary>
            Gets a value indicating whether the current node can have a Value.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.IsDefault">
            <summary>
            Gets a value indicating whether the current node is an attribute that was generated from the default 
            value defined in the DTD or schema.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.MaxNodeContentLength">
            <summary>
            Gets and sets the maximum length of the node content in bytes.        
            </summary>
            <remarks>
            	<para>This quota sets a limit on the node content length in bytes. This property
                applies to reading text and binary data content as well as element names, namespace
                URIs etc.</para>
            	<para>The default value assigned to this property during initialization of
                XmlFastInfosetReader is equal to Int32.MaxValue.</para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.MaxDepth">
            <summary>
            Gets and sets the maximum nested node depth.
            </summary>
            <remarks>
            	<para>The default value assigned to this property during initialization of
                XmlFastInfosetReader is equal to Int32.MaxValue.</para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Name">
            <summary>
            Gets the qualified name of the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.NamespaceURI">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.NameTable">
            <summary>
            Gets the <see cref="T:System.Xml.XmlNameTable">XmlNameTable</see> associated with this reader.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Prefix">
            <summary>
            Gets the namespace prefix associated with the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of an attribute node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.ReadState">
            <summary>
            Gets the state of the reader.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Item(System.Int32)">
            <summary>
            Gets the value of the attribute specified by the index. In C#, this property is
            the indexer for the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <value>The value of the specified attribute.</value>
            <overloads>
            Gets the value of the attribute. In C#, this property is the indexer for the
            XmlFastInfosetReader class.
            </overloads>
            <value>The value of the specified attribute.</value>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Item(System.String,System.String)">
            <summary>
            Gets the value of the attribute specified by the local name and namespace. In C#,
            this property is the indexer for the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <value>The value of the specified attribute.</value>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Item(System.String)">
            <summary>
            Gets the value of the attribute specified by the qualified name. In C#, this
            property is the indexer for the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <value>The value of the specified attribute.</value>
            <value>The value of the specified attribute.</value>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.VocabularyProvider">
            <summary>
            Gets and sets the %IVocabularyProvider% for resolving external vocabulary URI, when it is encountered within a document.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Vocabulary">
            <summary>
            Sets the vocabulary to be used when reading the Fast Infoset document.
            </summary>        
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._eventType">
            <summary> Current event</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._qNameStack">
            <summary> Stack of qualified names and namespaces</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._currentNamespaceAIIsStart">
            <summary> Namespaces associated with START_ELEMENT or END_ELEMENT</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._qualifiedName">
            <summary> Qualified name associated with START_ELEMENT or END_ELEMENT.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._attributes">
            <summary> List of attributes</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._characters">
            <summary> Characters associated with event.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._piTarget">
            <summary> State for processing instruction</summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser.unsafeIsTerminatorNext">
            <summary>
            Checks if the next event in FI stream is single or double terminator by picking next byte from the buffer.             
            </summary>
            <returns>
            Returns true if next FI event in the stream is single or double terminator, otherwise false.
            </returns>
            <remarks>
            Calling this method is not always safe as it can cause data in the octetBuffer to be overwriten next chunk 
            of octets. This method must not be called prior data in octetBuffer is already processed.
            </remarks>  
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser.IsEmptyElement">
            <summary>
            Checks if current element is empty by picking next byte from the buffer.             
            </summary>
            <returns>
            Returns true if current FI event is START ELEMET and next event in the stream is single or double terminator, otherwise false.
            </returns>
            <remarks>
            Calling this method is not always safe as it can cause data in the octetBuffer to be overwriten next chunk 
            of octets. This method must not be called prior data in octetBuffer is already processed.
            </remarks> 
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser.isWhiteSpace">
            <summary>  Returns true if the cursor points to a character data event that consists of all whitespace
            Application calling this method needs to cache the value and avoid calling this method again
            for the same event.
            </summary>
            <returns> true if the cursor points to all whitespace, false otherwise
            </returns>
        </member>
        <member name="T:Noemax.FastInfoset.XmlFastInfosetWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of
            generating streams or files containing Fast Infoset encoded XML data.
            </summary>    
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.IO.Stream)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast Infoset encoded 
            XML into the specified stream.
            </summary>
            <returns>An <strong>XmlWriter</strong> object.</returns>
            <param name="output">        
                 The stream to which you want to write. The System.Xml.XmlWriter writes FastInfoset 
             encoded XML and appends it to the specified stream.
             </param>
             <overloads>
             Creates a new %XmlWriter:T:System.Xml.XmlWriter% instance 
             for writing Fast Infoset encoded XML into the specified stream.
             </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.String)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlWriter">XmlWriter</see>
            instance for writing Fast Infoset encoded XML into the specified file.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
            </returns>
            <param name="outputFileName">        
                 The file to which you want to write. The System.Xml.XmlWriter creates a file
                 at the specified path and writes to it FastInfoset encoded XML data. The outputFileName
                 must be a file system path.
             </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast Infoset encoded XML into the specified stream
            using an
            <see cref="T:System.Xml.XmlWriterSettings">XmlWriterSettings</see> object.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
             </returns>
            <param name="output">
            The stream to which you want to write. The <strong>XmlWriter</strong> writes Fast
            Infoset encoded XML and appends it to the specified stream.
            </param>
            <param name="settings">
            The <strong>XmlWriterSettings</strong> object used to configure the new
            <strong>XmlWriter</strong> instance. If this is <strong>null</strong>
            (<strong>Northing</strong> in Visual Basic), a <strong>XmlWriterSettings</strong> with
            default settings is used.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.String,System.Xml.XmlWriterSettings)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast Infoset encoded 
            XML into the specified stream using an
            <see cref="T:System.Xml.XmlWriterSettings">XmlWriterSettings</see> object.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
            </returns>
            <param name="outputFileName">
            The file to which you want to write <strong>XmlWriter</strong> creates a file at
            the specified path. The <em>outputFileName</em> must be a file system path.
            </param>
            <param name="settings">
            The <strong>XmlWriterSettings</strong> object used to configure the new
            <strong>XmlWriter</strong> instance. If this is <strong>null</strong>
            (<strong>Northing</strong> in Visual Basic), a <strong>XmlWriterSettings</strong> with
            default settings is used.
            </param>           
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast Infoset encoded XML into the specified stream
            using an <see cref="T:System.Xml.XmlWriterSettings">XmlWriterSettings</see> object.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
            </returns>
            <param name="output">
            The stream to which you want to write. The <strong>XmlWriter</strong> writes Fast
            Infoset encoded XML and appends it to the specified stream.
            </param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.String,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlWriter">XmlWriter</see>
            instance for writing Fast Infoset encoded XML into the specified file.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
            </returns>
            <param name="outputFileName">        
                 The file to which you want to write. The System.Xml.XmlWriter creates a file
                 at the specified path and writes to it FastInfoset encoded XML data. The outputFileName
                 must be a file system path.
             </param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast 
            Infoset encoded XML into the specified stream
            using an
            <see cref="T:System.Xml.XmlWriterSettings">XmlWriterSettings</see> object.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
             </returns>
            <param name="output">
            The stream to which you want to write. The <strong>XmlWriter</strong> writes Fast
            Infoset encoded XML and appends it to the specified stream.
            </param>
            <param name="settings">
            The <strong>XmlWriterSettings</strong> object used to configure the new
            <strong>XmlWriter</strong> instance. If this is <strong>null</strong>
            (<strong>Northing</strong> in Visual Basic), a <strong>XmlWriterSettings</strong> with
            default settings is used.
            </param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.String,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast Infoset encoded XML into the specified stream
            using an <see cref="T:System.Xml.XmlWriterSettings">XmlWriterSettings</see> object.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
            </returns>
            <param name="outputFileName">
            The file to which you want to write <strong>XmlWriter</strong> creates a file at
            the specified path. The <em>outputFileName</em> must be a file system path.
            </param>
            <param name="settings">
            The <strong>XmlWriterSettings</strong> object used to configure the new
            <strong>XmlWriter</strong> instance. If this is <strong>null</strong>
            (<strong>Northing</strong> in Visual Basic), a <strong>XmlWriterSettings</strong> with
            default settings is used.
            </param> 
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see> class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream,System.Xml.XmlWriterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see> 
            class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
            <param name="settings">XmlWriterSettings object containing writer configuratoin.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see> class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
            <param name="closeOutput">
            If set to <strong>true</strong> writer will close the output stream when
            closed.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
            <param name="settings">
            The <strong>XmlWriterSettings</strong> object used to configure the new
            <strong>XmlWriter</strong> instance. If this is <strong>null</strong>
            (<strong>Northing</strong> in Visual Basic), a <strong>XmlWriterSettings</strong> with
            default settings is used.
            </param> 
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="closeOutput">
            If set to <strong>true</strong> writer will close the output stream when
            closed.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class.
            </summary>
            <remarks>
            	<para>This constructor creates an instance of
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
                which is is not associated to any stream and is intended for reusing the same
                writer for writing into more than one stream.</para>
            	<para>If you use this constructor you must initialize the reader by calling
                <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream)">Init</see>
                before using it.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class preparing to write into the specified stream.
            </summary>
            <remarks>
            	<para>Initializes the writer and sets it to use the provided stream as
                output.</para>
            	<para>This method allows the reuse the
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
                for writing to another stream.</para>
            </remarks>
            <param name="output">The stream to which you want to write.</param>
            <overloads>
            Initializes an instance of the 
            %XmlFastInfosetWriter:T:Noemax.FastInfoset.XmlFastInfosetWriter% 
            class preparing to write into the specified stream.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream,System.Xml.XmlWriterSettings)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class preparing to write into the specified stream.
            </summary>
            <remarks>
            	<para>Initializes the writer and sets it to use the provided stream as
                output.</para>
            	<para>This method allows the reuse the
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
                for writing to another stream.</para>
            </remarks>
            <param name="output">The stream to which you want to write.</param>
            <param name="settings">
            XmlWriterSettings to be applied to writer.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class preparing to write into the specified stream.
            </summary>
            <remarks>
            	<para>Initializes the writer and sets it to use the provided stream as
                output.</para>
            	<para>This method allows the reuse the
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
                for writing to another stream.</para>
            </remarks>
            <param name="output">The stream to which you want to write.</param>  
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class preparing to write into the specified stream.
            </summary>
            <remarks>
            	<para>Initializes the writer and sets it to use the provided stream as
                output.</para>
            	<para>This method allows the reuse the
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
                for writing to another stream.</para>
            </remarks>
            <param name="output">The stream to which you want to write.</param>
            <param name="settings"> XmlWriterSettings to be to configure the writer. </param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Clear">
            <summary>
            Clears the internal state of
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>.
            </summary>
            <remarks>
            Clears the internal state of the writer. After a call to this method the writer
            remains in an uninitialized state. You must call
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream)">Init</see>
            in order to reuse the writer for writing into another stream.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Close">
            <summary>
            Changes the
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetWriter.WriteState">WriteState</see>
            to <strong>Closed</strong>.
            </summary>
            <remarks>
            If
            <see cref="P:System.Xml.XmlWriterSettings.CloseOutput">CloseOutput</see>
            is set to <strong>true</strong>, the underlying stream will also be closed.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Flush">
            <summary>
            Flushes whatever is in the buffer into the underlying stream and flushes the
            underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.LookupPrefix(System.String)">
            <summary>
            Returns the closest prefix defined in the current namespace scope for the namespace URI
            </summary>
            <returns>
            The matching prefix or a null reference (<b>Nothing</b> in Visual Basic) if no
            matching namespace URI is found in the current scope.
            </returns>
            <param name="ns"><para>The namespace URI whose prefix you want to find.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes the binary bytes using Fast Infoset's binary encoding of Base64 values
            and writes the result at the current position in the content.
            </summary>
            <param name="buffer">the byte array to encode.</param>
            <param name="index">The position within the buffer indicating the start of the bytes to write.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes the binary bytes using Fast Infoset's binary encoding of hexadecimal
            values and writes the result at the current position in the content.
            </summary>
            <param name="buffer">the byte array to encode.</param>
            <param name="index">The position in the buffer indicating the start of the bytes to write.</param>
            <param name="count"><para>The number of bytes to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Int32)">
            <summary>
            Encodes a 32-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <overloads>Writes an element containing a single value.</overloads>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Int64)">
            <summary>
            Encodes a 64-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Int16)">
            <summary>
            Encodes a 16-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Double)">
            <summary>
            Encodes a double-precision floating-point number using Fast Infoset's binary
            encoding and writes the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Single)">
            <summary>
            Encodes a single-precision floating-point number using Fast Infoset's binary
            encoding and writes the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Boolean)">
            <summary>
            Encodes a boolean value using Fast Infoset's binary encoding and writes the
            result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Int32)">
            <summary>
            Encodes a 32-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <overloads>Writes an element containing a single value.</overloads>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Int64)">
            <summary>
            Encodes a 64-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Int16)">
            <summary>
            Encodes a 16-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Double)">
            <summary>
            Encodes a double-precision floating-pointing using Fast Infoset's binary encoding
            and writes the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Single)">
            <summary>
            Encodes a single-precision floating-pointing using Fast Infoset's binary encoding
            and writes the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Boolean)">
            <summary>
            Encodes a boolean value using Fast Infoset's binary encoding and writes the
            result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Object)">
            <summary><para>Writes the value.</para></summary>
            <remarks>
            <para>This method takes the common language runtime (CLR) object and converts the
            input value to the desired output type using the FastInfoset encoding rules. If the
            type cannot not be represented as a binary encoded value it's serialized as a
            string according to the XML Schema definition language (XSD) data type conversion
            rules.</para>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            <c>WriteValue(Object)</c> method using an array of values as parameter.</para>
            </remarks>
            <param name="value">The object representing the value to write.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int32[])">
            <summary>
            	<para>Encodes a single or multiple 32-bit signed integers using Fast Infoset's
                binary encoding and writes the result at the current position in the element
                content.</para>
            </summary>
            <overloads>Writes a single or multiple simple-typed values.</overloads>
            <param name="value">The array containing a single or multiple 32-bit signed integers.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int64[])">
            <summary>
            	<para>Encodes a single or multiple 64-bit signed integers using Fast Infoset's
                binary encoding and writes the result at the current position in the element
                content.</para>
            </summary>
            <param name="value">The array containing a single or multiple 64-bit signed integers.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int16[])">
            <summary>
            	<para>Encodes a single or multiple 16-bit signed integers using Fast Infoset's
                binary encoding and writes the result at the current position in the element
                content.</para>
            </summary>
            <param name="value">The array containing a single or multiple 16-bit signed integers.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Double[])">
            <summary>
            	<para>Encodes a single or multiple double-precision floating-point numbers using
                Fast Infoset's binary encoding and writes the result at the current position in the
                element content.</para>
            </summary>
            <param name="value">
            The array containing a single or multiple double-precision floating-point
            numbers.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Single[])">
            <summary>
            	<para>Encodes a single or multiple single-precision floating-point numbers using
                Fast Infoset's binary encoding and writes the result at the current position in the
                element content.</para>
            </summary>
            <param name="value">
            The array containing a single or multiple single-precision floating-point
            numbers.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Boolean[])">
            <summary>
            	<para>Encodes a single or multiple boolean values using Fast Infoset's binary
                encoding and writes the result at the current position in the element
                content.</para>
            </summary>
            <remarks>
            	<para>This method encodes a single or multiple boolean values using Fast Infoset's
                binary encoding and writes the result at the current position in the
                content.</para>
            </remarks>        
            <param name="value">The array containing a single or multiple boolean values.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Decimal[])">
            <summary>
            	<para>Encodes a single or multiple decimal values using Fast Infoset's binary
                encoding and writes the result at the current position in the element
                content.</para>
            </summary>
            <remarks>
            	<para>This method encodes a single or multiple decimal values using Fast Infoset's
                binary encoding and writes the result at the current position in the
                content.</para>
            </remarks>        
            <param name="value">The array containing a single or multiple decimal values.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a boolean value.  
            </summary>  
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value">
            	<para>The boolean value to write.</para>
            </param>      
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Double)">
            <summary>
            Writes a double-precision floating point value. 
            </summary>    
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value">
            	<para>The double-precision floating-point <font color="black">value to
                write.</font></para>
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Single)">
            <summary>
            Writes a single-precision floating point value.
            </summary>
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value">
            	<para>The single-precision floating-point <font color="black">value to
                write.</font></para>
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int64)">
            <summary>
            Writes a 64-bit signed integer value.
            </summary>
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value"><para>The 64-bit signed integer <font color="black">value to write.</font></para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int32)">
            <summary>
            Writes a 32-bit signed integer.
            </summary>        
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value"><para>The 32-bit signed integer <font color="black">value to write.</font></para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int16)">
            <summary>
            Writes a 16-bit signed integer value. 
            </summary>
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value"><para>The 16-bit signed integer <font color="black">value to write.</font></para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteGuid(System.Guid)">
            <summary>
            Writes GUID value.
            </summary>
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value">Guid value to write.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.TimeSpan)">
            <summary>
            Write TimeSpan value.
            </summary>
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks> 
            <param name="value">TimeSpan value to write.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Decimal)">
            <summary>
            Write Decimal value.
            </summary>  
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>         
            <param name="value">Decimal value to writer.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.DateTime)">
            <summary>
            Write DateTime value.
            </summary>  
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>         
            <param name="value">DateTime value to writer.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteCData(System.String)">
            <summary>Writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</summary>
            <remarks>
            	<para>If the <b>text</b> is a null reference
                (<b>Nothing</b> in Visual Basic) or <b>String.Empty</b>, this method does not write
                anything.</para>
            </remarks>
            <param name="text"><para>The text to place inside the CDATA block.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteCharEntity(System.Char)">
            <summary>
            Forces the generation of a character entity for the specified Unicode character value.
            </summary>
            <param name="ch"><para>The Unicode character for which to generate a character entity.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes text one buffer at a time.
            </summary>
            <param name="buffer">The character array containing the text to write.</param>
            <param name="index"><para>The position in the buffer indicating the start of the text to write.</para></param>
            <param name="count"><para>The number of characters to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment containing the specified text.
            </summary>
            <remarks>
            	<para>If the <b>text</b> is a null reference
                (<b>Nothing</b> in Visual Basic) or <b>String.Empty</b>, this method does not write
                anything.</para>
            	<para>If
                <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteComment(System.String)">
                RemoveComments</see> is set to <strong>true</strong>, the writer ignores all calls to
                this method.</para>
            </remarks>
            <param name="text"><para>The text to place inside the comment.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            This method is not supported and always throws a
            <b>NotSupportedException</b>.
            </summary>
            <remarks>
            Writing DOCTYPE is presently not supported by
            <strong>XmlFastInfosetWriter</strong>.
            </remarks>
            <param name="name">The name of the DOCTYPE. This must be non-empty.</param>
            <param name="pubid">
            If non-null it also writes PUBLIC "pubid" "sysid" where
            <b>pubid</b> and <b>sysid</b> are
            replaced with the value of the given arguments.
            </param>
            <param name="sysid">
            If <b>pubid</b> is a null reference (<b>Nothing</b> in
            Visual Basic) and <b>sysid</b> is non-null it writes SYSTEM
            "sysid" where <b>sysid</b> is replaced with the value of this
            argument.
            </param>
            <param name="subset">
            	<para>If non-null it writes [subset] where subset is replaced with the value of
                this argument.</para>
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteEndAttribute">
            <summary>
            Closes the previous
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteStartAttribute(System.String,System.String,System.String)">WriteStartAttribute</see> call.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteEndDocument">
            <summary>
            Closes any open elements or attributes and changes the
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetWriter.WriteState">WriteState</see> to <strong>Start</strong>.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteEndElement">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteEntityRef(System.String)">
            <summary>
            This method is not supported and always throws a
            <b>NotSupportedException</b>.
            </summary>
            <remarks>
            Writing of entity references is presently not supported by
            <strong>XmlFastInfosetWriter</strong>.
            </remarks>
            <param name="name"><para>The name of the entity reference.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteFullEndElement">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteName(System.String)">
            <summary>
            Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation.
            </summary>
            <param name="name"><para>The name to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteNmToken(System.String)">
            <summary>
            Writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation.
            </summary>
            <param name="name"><para>The name to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>Writes out a processing instruction.</summary>
            <param name="name">The name of the processing instruction.</param>
            <param name="text"><para>The text to include in the processing instruction.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteQualifiedName(System.String,System.String)">
            <summary>
            Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.
            </summary>
            <remarks>
            	<para>If <b>ns</b> maps to the current default namespace,
                no prefix is generated.</para>
            	<para>This method generates a prefix if <b>ns</b> is not
                found.</para>
            </remarks>
            <param name="localName">The local name to write.</param>
            <param name="ns"><para>The namespace URI for the name.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary><para>This method is not supported.</para></summary>
            <remarks>
            Writing raw XML text is not supported by the Fast Infoset standard. This method
            works the same way as
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteString(System.String)">WriteString</see>.
            </remarks>
            <param name="buffer">The character array containing the text to write.</param>
            <param name="index">The position within the buffer indicating the start of the text to write.</param>
            <param name="count"><para>The number of characters to write.</para></param>
            <overloads>
            This method is not supported.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteXmlnsAttribute(System.String,System.String)">
            <summary>
            Writes a namespace declaration attribute.
            </summary>
            <param name="prefix">The prefix that is bound to the given namespace.</param>
            <param name="namespaceUri">The namespace to which the prefix is bound.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            Writes the start of an attribute.
            </summary>
            <param name="prefix">The namespace prefix of the attribute.</param>
            <param name="localName">The local name of the attribute.</param>
            <param name="ns"><para>The namespace URI for the attribute.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteRaw(System.String)">
            <summary>This method is not supported.</summary>
            <remarks>
            Writing raw XML text is not supported by the Fast Infoset standard. This method
            works the same way as
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteString(System.String)">WriteString</see>.
            </remarks>
            <param name="data"><para>The string containing the text to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteStartDocument">
            <summary>
            Writes the XML declaration with the version "1.0".
            </summary>
            <overloads>
            Writes the XML declaration with the version "1.0".
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteStartDocument(System.Boolean)">
            <summary>
            Writes the XML declaration with the version "1.0".
            </summary>
            <remarks>
            Since
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            does not preserve the original XML declaration, <strong>standalone</strong> is
            ignored.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Writes the specified start tag.
            </summary>
            <param name="prefix">The namespace prefix of the element.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI to associate with the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteString(System.String)">
            <summary>
            Writes the given text content.
            </summary>
            <param name="text"><para>The text to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>Writes a Unicode surrogate char pair.</summary>
            <param name="lowChar"><para>The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</para></param>
            <param name="highChar"><para>The high surrogate. This must be a value between 0xD800 and 0xDBFF.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <remarks>
            	<strong>XmlFastInfosetWriter</strong> does not preserve non-significant white
            space unless it's written within the scope of the element with the xml:space attribute
            set to "true" (xml:space="true").
            </remarks>
            <param name="ws"><para>The string of white space characters.</para></param>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.AttributeStringsIndexed">
            <summary>
            Returns the number of the attribute value strings indexed in FastInfoset vocabulary.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.ContentStringsIndexed">
            <summary>
            Returns the number of the element content strings indexed in FastInfoset vocabulary.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.OtherStringsIndexed">
            <summary>
            Returns the number of the comment and Processing Instruction value strings indexed in FastInfoset vocabulary.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.WriteState">
            <summary>Gets the state of the writer.</summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.Settings">
            <summary>
            Gets the XmlWriterSettings object used to create this XmlWriter instance.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.XmlLang">
            <summary>
            Gets the current xml:lang scope.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.XmlSpace">
            <summary>
            Gets an XmlSpace representing the current xml:space scope.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.Vocabulary">
            <summary>
            Sets and gets the vocabulary to be use when writing the Fast Infoset document.
            </summary>        
            <remarks>
            The vocabulary provides mappings of strings to integer indices which are used to improve the compactness of the
            Fast Infoset stream by replacing strings contained in it with their index in the vocabulary.
            </remarks> 
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.IgnoreComments">
            <summary>
            Gets and sets whether this writer should ignore calls to the
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteComment(System.String)">WriteComment</see>
            method.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.IgnoreProcessingInstructions">
            <summary>
            Gets and sets whether this writer should ignore calls to the
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteProcessingInstruction(System.String,System.String)">WriteProcessingInstruction</see>
            method.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.MinVocabularyStringLength">
            <summary>
            Gets and sets the minimum number of characters that a string value must contain in order to be added to 
            the vocabulary.
            </summary>
            <remarks>
            <para>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values 
            added to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.
            </para>
            <para>
            The minimum string length specifies the minimum number of characters that a string value must contain in order to be added to
            the vocabulary. 
            </para>
            <para>
            Default value of this property is 0.
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.MaxVocabularyStringLength">
            <summary>
            Gets and sets the maximum number of characters that a string value may contain in order to be added to 
            the vocabulary.
            </summary>
            <remarks>
            <para>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values 
            added to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.
            </para>
            <para>
            The maximum string length specifies the maximum number of characters that a string value may contain in order to be added to
            the vocabulary. Longer values are not added to the vocabulary. A higher limit might result in higher compactness but might also 
            result in higher resource consumption than a lower limit.
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.MaxVocabularyStringIndex">
            <summary>
            Gets and sets the maximum number of strings that may be added to the vocabulary. 
            </summary>
            <remarks>
            <para>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values 
            added to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.
            </para>
            <para>
            The maximum number of strings specifies up to how many strings may be added to the vocabulary. When this limit is reached, no 
            more values are added to the vocabulary. A higher limit might result in higher compactness but might also result in 
            higher resource consumption than a lower limit.
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.Profile">
            <summary>
            	<see cref="T:Noemax.FastInfoset.XmlFastInfosetWriterProfile">XmlFastInfosetWriterProfile</see>
                that defines the way how primitive data-type are going to be serialized.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetWriter.Encoder.CHARACTER_CONTENT_CHUNK_SIZE_CONSTRAINT">
            The default value for the limit on the size of character content chunks
            that will be indexed.
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetWriter.Encoder.UTF_8">
            The character encoding scheme string for UTF-8
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetWriter.Encoder.UTF_16BE">
            The character encoding scheme string for UTF-16BE
        </member>
        <member name="T:Noemax.FastInfoset.EncodingAlgorithmIndexes">
            <summary> The indexes of built-in encoding algorithms.	
            <p>The indexes of the built-in encoding algorithms are specified
            in ITU-T Rec. X.891 | ISO/IEC 24824-1 (Fast Infoset), clause
            10. The indexes start from 0 instead of 1 as specified.</p>	
            </summary>	
        </member>
        <member name="M:Noemax.FastInfoset.Notation.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of Notation </summary>
        </member>
        <member name="T:EncodingAlgorithmAttributes">
             Interface for a list of XML attributes that may contain encoding algorithm
             data.
            
             @version 0.1
             @see Noemax.FastInfoset.sax.FastInfosetReader
             @see org.xml.sax.XMLReader
        </member>
        <member name="M:EncodingAlgorithmAttributes.getAlgorithmURI(System.Int32)">
             Return the URI of the encoding algorithm.
            
             <p>If the algorithm data corresponds to a built-in encoding algorithm
                then the null is returned.</p>
            
             <p>If the algorithm data corresponds to an application-defined encoding 
                algorithm then the URI of the algorithm is returned.</p>
            
             <p>If {@link #getAlgorithmData(int)} returns null then the result of 
                this method is undefined.</p>
            
             @param index The attribute index (zero-based).
             @return The URI.
        </member>
        <member name="M:EncodingAlgorithmAttributes.getAlgorithmIndex(System.Int32)">
             Return the index of the encoding algorithm.
            
             <p>If {@link #getAlgorithmData(int)} returns null then the result of 
                this method is undefined.</p>
            
             @param index The attribute index (zero-based).
             @return The index
             @see Noemax.FastInfoset.EncodingAlgorithmIndexes       
        </member>
        <member name="M:EncodingAlgorithmAttributes.getAlgorithmData(System.Int32)">
             Return the data of the encoding algorithm.
            
             <p>If the algorithm data corresponds to a built-in encoding algorithm
                then an Object corresponding to the Java primitive type is returned.</p>
            
             <p>If the algorithm data corresponds to an application-defined encoding 
                algorithm then an Object that is an instance of <code>byte[]</code>
                is returned if there is no EncodingAlgorithm registered for the 
                application-defined encoding algorithm URI. Otherwise, an Object produced 
                from the registeredEncodingAlgorithm is returned.</p>
            
             <p>If there no encoding algorithm data associated an attribute then 
                <code>null</code> is returned.</p>
            
             @param index The attribute index (zero-based).
             @return The data
        </member>
        <member name="T:Noemax.FastInfoset.SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>	
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.ToByteArray(System.Object[])">
            <summary>
            Converts a array of object-type instances to a byte-type array.
            </summary>
            <param name="tempObjectArray">Array to convert.</param>
            <returns>An array of byte type elements.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>	
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.GetCharsFromString(System.String,System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Copies an array of chars obtained from a string into a specified array of chars
            </summary>
            <param name="sourceString">The string to get the chars from</param>
            <param name="sourceStart">Position of the string to start getting the chars</param>
            <param name="sourceEnd">Position of the string to end getting the chars</param>
            <param name="destinationArray">Array to return the chars</param>
            <param name="destinationStart">Position of the destination array of chars to start storing the chars</param>
            <returns>An array of chars</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.WriteStackTrace(System.Exception,System.IO.TextWriter)">
            <summary>
            Writes the exception stack trace to the received stream
            </summary>
            <param name="throwable">Exception to obtain information from</param>
            <param name="stream">Output sream used to write to</param>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.PutElement(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>
            Adds a new key-and-value pair into the hash table
            </summary>
            <param name="collection">The collection to work with</param>
            <param name="key">Key used to obtain the value</param>
            <param name="newValue">Value asociated with the key</param>
            <returns>The old element associated with the key</returns>
        </member>
        <member name="T:Noemax.FastInfoset.SupportClass.ArraysSupport">
            <summary>
            This class manages array operations.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.ArraysSupport.IsArrayEqual(System.Array,System.Array)">
            <summary>
            Compares the entire members of one array whith the other one.
            </summary>
            <param name="array1">The array to be compared.</param>
            <param name="array2">The array to be compared with.</param>
            <returns>True if both arrays are equals otherwise it returns false.</returns>
            <remarks>Two arrays are equal if they contains the same elements in the same order.</remarks>
        </member>
        <member name="M:Noemax.FastInfoset.UnparsedEntity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of UnparsedEntityDeclaration </summary>
        </member>
        <member name="M:Noemax.FastInfoset.Util.isEmptyString(System.String)">
            <summary> a string is empty if it's null or contains nothing</summary>
            <param name="s">The character to check.
            </param>
        </member>
        <member name="T:Noemax.FastInfoset.XMLChar">
            <summary> This class defines the basic XML character properties. Add more methods as needed.
            Refer to XMLChar.java in xerces.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XMLChar.isSpace(System.Int32)">
            <summary> Returns true if the specified character is a space character
            as defined by production [3] in the XML 1.0 specification.
            </summary>
            <param name="c">The character to check.
            </param>
        </member>
        <member name="T:Noemax.FastInfoset.ReaderVocabulary">
            <summary>
            Provides a Fast Infoset vocabulary for use by %Noemax.FastInfoset.XmlFastInfosetReader%.
            </summary>
            <remarks>
            The vocabulary provides mappings of strings to integer indices which are used to improve the compactness of the Fast Infoset stream
            by replacing strings contained in it with their index in the vocabulary.
            </remarks> 
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.#ctor">
            <summary>Initializes a new instance of %ReaderVocabulary%.</summary>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.#ctor(Noemax.FastInfoset.WriterVocabulary)">
            <summary>
            Initializes a new instance of %ReaderVocabulary% by coping tables from the specified %WriterVocabulary%.
            </summary>
            <param name="vocabulary">The writer vocabulary from which to copy tables from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.SetReadOnlyVocabulary(Noemax.FastInfoset.ReaderVocabulary)">
            <summary>
            Specifies and external vocabulary to be used as read-only vocabulary.
            </summary>
            <param name="vocabulary">The vocabulary to use as read-only vocabulary.</param>        
            <remarks>
            The read-only vocabulary is used as a predefined reference vocabulary for resolving strings and indexes. The read-only 
            vocabulary never gets updated with more strings. Strings that are neither in the read-only vocabulary nor the current 
            vocabulary are added to the current vocabulary.
            </remarks> 
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.SetExternalVocabulary(System.String,Noemax.FastInfoset.ReaderVocabulary)">
            <summary>
            Sets the read-only referenced vocabulary for this vocabulary.
            </summary>
            <param name="referencedVocabularyURI">The URI of external referenced vocabulary.</param>
            <param name="referencedVocabulary">The external referenced vocabulary.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Clear">
            <summary>
            Clears vocabulary tables.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddAttributeName(System.String,System.String,System.String)">
            <summary>
            Adds the attribute qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an attribute namespace.</param>
            <param name="name">The attribute local name.</param>
            <param name="namespaceUri">The namespace URI of an attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddElementName(System.String,System.String,System.String)">
            <summary>
            Adds the element qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an element namespace.</param>
            <param name="name">The local name of the element.</param>
            <param name="namespaceUri">The namespace URI of the element qualified name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddNamespace(System.String)">
            <summary>
            Adds the namespace URI to the vocabulary.
            </summary>        
            <param name="namespaceUri">The namespace URI.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddPrefix(System.String)">
            <summary>
            Adds the prefix to the vocabulary.
            </summary>
            <param name="prefix">The prefix string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddLocalName(System.String)">
            <summary>
            Adds the local name to the vocabulary.
            </summary>
            <param name="name">The local name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddContentString(System.String)">
            <summary>
            Adds the content string to the vocabulary.
            </summary>
            <param name="text">The content string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddAttributeString(System.String)">
            <summary>
            Adds the attribute value string.
            </summary>
            <param name="text">The attribute value string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.LoadFromFi(Noemax.FastInfoset.XmlFastInfosetReader)">
            <summary>
            Populates the vocabulary by reading the Fast Infoset document from the specified reader.
            </summary>
            <param name="reader">The reader to read the Fast Infoset document from.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.LoadFromFi(System.String)">
            <summary>
            Populates the vocabulary by reading the Fast Infoset document from the specified file.
            </summary>
            <param name="filename">The file to read the Fast Infoset document from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.LoadFromXml(System.Xml.XmlReader,System.Int32,System.Int32)">
            <summary>
            Populates the vocabulary by serializing the document from the specified XML reader.
            </summary>
            <param name="reader">The XML reader to read the document from.</param>
            <param name="maxVocabularyStringLength">The %MaxVocabularyStringLength:XmlFastInfosetWriter.MaxVocabularyStringLength% 
                setting to use when serializing to document into the vocabulary.</param>
            <param name="maxVocabularyStringIndex">The %MaxVocabularyStringIndex:XmlFastInfosetWriter.MaxVocabularyStringIndex% 
                setting to use when serializing to document into the vocabulary.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.LoadFromXml(System.String,System.Int32,System.Int32)">
            <summary>
            Populates the vocabulary by serializing the document from the specified XML file.
            </summary>
            <param name="filename">The XML file to read the document from.</param>
            <param name="maxVocabularyStringLength">The %MaxVocabularyStringLength:XmlFastInfosetWriter.MaxVocabularyStringLength% 
                setting to use when serializing to document into the vocabulary.</param>
            <param name="maxVocabularyStringIndex">The %MaxVocabularyStringIndex:XmlFastInfosetWriter.MaxVocabularyStringIndex% 
                setting to use when serializing to document into the vocabulary.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Save(System.String)">
            <summary>
            Saves the vocabulary into the file with speicifed path.
            </summary>
            <param name="path">The path to the file to save the vocabulary into.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Save(System.IO.Stream)">
            <summary>
            Saves the vocabulary into the speicifed stream.
            </summary>
            <param name="stream">The stream to save the vocabulary into.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Save(System.String,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Saves the vocabulary into the file with speicifed path.
            </summary>
            <param name="path">The path to the file to save the vocabulary into.</param>
            <param name="compression">The compression method to use to compress vocabulary.</param> 
            <param name="compressionLevel">The compression level to use when compressing vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Save(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Saves the vocabulary into the speicifed stream.
            </summary>
            <param name="stream">The stream to save the vocabulary into.</param>
            <param name="compression">The compression method to use to compress vocabulary.</param> 
            <param name="compressionLevel">The compression level to use when compressing vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Load(System.String)">
            <summary>
            Load the vocabulary form the file with specified path.
            </summary>
            <param name="path">The path to the file to load the vocabulary from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Load(System.String,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Load the vocabulary form the file with specified path.
            </summary>
            <param name="path">The path to the file to load the vocabulary from.</param>
            <param name="compression">The compression method to use to decompress vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Load(System.IO.Stream)">
            <summary>
            Load the vocabulary form the specified stream.
            </summary>
            <param name="stream">The stream to load the vocabulary from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Load(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Load the vocabulary form the specified stream.
            </summary>
            <param name="stream">The stream to load the vocabulary from.</param>
            <param name="compression">The compression method to use to decompress vocabulary.</param> 
        </member>
        <member name="T:Noemax.FastInfoset.WriterVocabulary">
            <summary>
            Provides a Fast Infoset vocabulary for use by %Noemax.FastInfoset.XmlFastInfosetWriter%.
            </summary>
            <remarks>
            The vocabulary provides mappings of strings to integer indices which are used to improve the compactness of the Fast Infoset stream
            by replacing strings contained in it with their index in the vocabulary.
            </remarks> 
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.#ctor">
            <summary>
            Initializes a new instance of %Noemax.FastInfoset.WriterVocabulary%.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.#ctor(Noemax.FastInfoset.ReaderVocabulary)">
            <summary>
            Initializes a new instance of %Noemax.FastInfoset.WriterVocabulary% by copping tables of the specified %ReaderVocabulary%.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.SetReadOnlyVocabulary(Noemax.FastInfoset.WriterVocabulary)">
            <summary>
            Sets the read-only vocabulary for this vocabulary.
            </summary>
            <param name="vocabulary">The vocabulary to use.</param>
            <remarks>
            The read-only vocabulary is used as a predefined reference vocabulary for resolving strings and indexes. The read-only 
            vocabulary never gets updated with more strings. Strings that are neither in the read-only vocabulary nor the current 
            vocabulary are added to the current vocabulary.
            </remarks> 
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.SetInitialReadOnlyVocabulary(Noemax.FastInfoset.WriterVocabulary)">
            <summary>
            Sets an initial read-only vocabulary for this vocabulary.
            </summary>
            <param name="initialVocabulary">The initial vocabulary to use.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.SetExternalVocabulary(System.String,Noemax.FastInfoset.WriterVocabulary)">
            <summary>
            Sets an external read-only vocabulary for this vocabulary.
            </summary>
            <param name="externalVocabularyURI">
            The URI to  identify the external vocabulary in the document.
            </param>
            <param name="externalVocabulary">The external vocabulary to use.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddAttributeName(System.String,System.String,System.String)">
            <summary>
            Adds the attribute qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an attribute namespace.</param>
            <param name="localName">The attribute local name.</param>
            <param name="namespaceUri">The namespace URI of an attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddElementName(System.String,System.String,System.String)">
            <summary>
            Adds the element qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an element namespace.</param>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceUri">The namespace URI of the element qualified name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddNamespace(System.String)">
            <summary>
            Adds the namespace URI to the vocabulary.
            </summary>        
            <param name="namespaceUri">The namespace URI.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddPrefix(System.String)">
            <summary>
            Adds the prefix to the vocabulary.
            </summary>
            <param name="prefix">The prefix string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddLocalName(System.String)">
            <summary>
            Adds the local name to the vocabulary.
            </summary>
            <param name="name">The local name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddContentString(System.String)">
            <summary>
            Adds the content string to the vocabulary.
            </summary>
            <param name="text">The content string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddAttributeString(System.String)">
            <summary>
            Adds the attribute value string.
            </summary>
            <param name="text">The attribute value string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Clear">
            <summary>
            Clears the vocabulary.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.LoadFromXml(System.Xml.XmlReader,System.Int32,System.Int32)">
            <summary>
            Populates the vocabulary by serializing the document from the specified XML reader.
            </summary>
            <param name="reader">The XML reader to read the document from.</param>
            <param name="maxVocabularyStringLength">The %MaxVocabularyStringLength:XmlFastInfosetWriter.MaxVocabularyStringLength% 
                setting to use when serializing to document into the vocabulary.</param>
            <param name="maxVocabularyStringIndex">The %MaxVocabularyStringIndex:XmlFastInfosetWriter.MaxVocabularyStringIndex% 
                setting to use when serializing to document into the vocabulary.</param>                
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.LoadFromXml(System.String,System.Int32,System.Int32)">
            <summary>
            Populates the vocabulary by serializing the document from the specified XML file.
            </summary>
            <param name="filename">The XML file to read the document from.</param>
            <param name="maxVocabularyStringLength">The %MaxVocabularyStringLength:XmlFastInfosetWriter.MaxVocabularyStringLength% 
                setting to use when serializing to document into the vocabulary.</param>
            <param name="maxVocabularyStringIndex">The %MaxVocabularyStringIndex:XmlFastInfosetWriter.MaxVocabularyStringIndex% 
                setting to use when serializing to document into the vocabulary.</param>
            <overloads>Populates the vocabulary.</overloads>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.LoadFromFi(Noemax.FastInfoset.XmlFastInfosetReader)">
            <summary>
            Populates the vocabulary by reading the Fast Infoset document from the specified reader.
            </summary>
            <param name="reader">The reader to read the Fast Infoset document from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.LoadFromFi(System.String)">
            <summary>
            Populates the vocabulary by reading the Fast Infoset document from the specified file.
            </summary>
            <param name="filename">The file to read the Fast Infoset document from.</param>
            <overloads>Populates the vocabulary.</overloads>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Save(Noemax.FastInfoset.XmlFastInfosetWriter)">
            <summary>
            Saves the vocabulary by writing it into the specified %XmlFastInfosetWriter%.
            </summary>
            <param name="writer">The %XmlFastInfosetWriter% to be used to write the vocabulary.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Save(System.String)">
            <summary>
            Saves the vocabulary into the file with speicifed path.
            </summary>
            <param name="path">The path to the file to save the vocabulary into.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Save(System.String,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Saves the vocabulary into the file with speicifed path.
            </summary>
            <param name="path">The path to the file to save the vocabulary into.</param>
            <param name="compression">The compression method to use to compress vocabulary.</param> 
            <param name="compressionLevel">The compression level to use when compressing vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Save(System.IO.Stream)">
            <summary>
            Saves the vocabulary into the speicifed stream.
            </summary>
            <param name="stream">The stream to save the vocabulary into.</param>
            <overloads>
            Saves the vocabulary.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Save(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Saves the vocabulary into the speicifed stream.
            </summary>
            <param name="stream">The stream to save the vocabulary into.</param>
            <param name="compression">The compression method to use to compress vocabulary.</param> 
            <param name="compressionLevel">The compression level to use when compressing vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Load(System.String)">
            <summary>
            Load the vocabulary form the file with specified path.
            </summary>
            <param name="path">The path to the file to load the vocabulary from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Load(System.String,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Load the vocabulary form the file with specified path.
            </summary>
            <param name="path">The path to the file to load the vocabulary from.</param>
            <param name="compression">The compression method to use to decompress vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Load(System.IO.Stream)">
            <summary>
            Load the vocabulary form the specified stream.
            </summary>
            <param name="stream">The stream to load vocabulary from.</param>
            <overloads>Populates the vocabulary.</overloads>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Load(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Load the vocabulary form the specified stream.
            </summary>
            <param name="stream">The stream to load vocabulary from.</param>
            <param name="compression">The compression method to use to decompress vocabulary.</param> 
        </member>
        <member name="P:Noemax.FastInfoset.WriterVocabulary.ReadOnlyVocabulary">
            <summary>
            Gets an associated read-only vocabulary.
            </summary>  
            <remarks>
            External read-only vocabulary provides provides indecies for encoding previously encountered values, 
            it does not get updated when new values are encountered in the document.
            You can populate read-only vocabulary by loading XML or FI document or reusing 
            vocabulary once used for writing a Fast Infoset document.
            </remarks>
        </member>
        <member name="T:Noemax.FastInfoset.XmlFastInfosetFormat">
            <summary>Defines the way that Fast Infoset serializes primitive data types.</summary>
            <remarks>When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy 
            and increase compactness. However, if there are few repeating values of the same data type then 
            it might be preferable not to use indexing.</remarks>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.Literal">
            <summary>Encodes values in a UTF-8 text string format. Provides maximum interoperability with other Fast Infoset implementations.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.LiteralNoIndex">
            <summary>Encodes values in a UTF-8 text string format. Provides maximum interoperability with other Fast Infoset implementations.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.RestrictedAlphabet">
            <summary>Encodes values in a 4 bits per character format. Provides higher compactness than Literal.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.RestrictedAlphabetNoIndex">
            <summary>Encodes values in a 4 bits per character format. Provides higher compactness than Literal.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.Binary">
            <summary>Encodes values in a binary format. Provides higher processing performance than Literal and Restricted Alphabet.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.DotNet">
            <summary> This format is obsolete.</summary>        
        </member>
        <member name="T:Noemax.FastInfoset.XmlFastInfosetWriterProfile">
            <summary>Contains the settings that specify the way FastInfoset serializes primitive data types.</summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriterProfile.#ctor">
            <summary>
            Initializes a new instance of XmlFastInfosetWriterProfile with default settings.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriterProfile.#ctor(Noemax.FastInfoset.XmlFastInfosetWriterProfile)">
            <summary>
            Initializes a new instance of XmlFastInfosetWriterProfile by coping settings of
            already exisitng one.
            </summary>
            <param name="source">The profile to copy settings from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriterProfile.CopyFrom(Noemax.FastInfoset.XmlFastInfosetWriterProfile)">
            <summary>Coppies all properties from already existing XmlFastInfosetWriterProfile object.</summary>
            <param name="source">The source XmlFastInfosetWriterProfile object to copy properties from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriterProfile.Clone">
            <summary>Creates a copy cone of the XmlFastInfosetWriterProfile.</summary>
            <returns>The clone of this object.</returns>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.DateTimeFormat">
            <summary>Gets and sets the format used to serialize DateTime values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>        
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.DecimalFormat">
            <summary>Gets and sets the format used to serialize DateTime values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.TimeSpanFormat">
            <summary>Gets and sets the format used to encode TimeSpan values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>        
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.LongFormat">
            <summary>Gets and sets the format used to encode long integer values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.IntFormat">
            <summary>Gets and sets the format used to encode integer values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.ShortFormat">
            <summary>Gets and sets the format used to serialize short integer values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.DoubleFormat">
            <summary>Gets and sets the format used to serialize double precision floating point values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.FloatFormat">
            <summary>Gets and sets the format used to serialize floating point values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.GuidFormat">
            <summary>Gets and sets the format used to serialize guild values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>    
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.BooleanFormat">
            <summary>Gets and sets the format used to serialize boolean values.</summary>      
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>    
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.Literal">
            <summary>Encodes values in a UTF-8 text string format. Provides interoperability with Fast Infoset 
            implementations that only support the Literal representation.</summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.Basic">
            <summary>The Basic profile usually provides the highest processing performance. It is set to use the Binary representation whenever available.</summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.Compact">
            <summary>The Compact profile usually provides the highest compactness.It is set to use the Restricted Alphabet representation whenever available.</summary>
        </member>
        <member name="T:Noemax.Xml.XmlSchemaBasedConverter">
            <summary>
            This class takes XML input and processes it using its XML schema and performs original data-type aware serialization, 
            taking into account node content types defined by schema. The final output of sialization depends on which writer is being used. 
            This class can be used combined with binary XML writers to  produce a more efficient representation of text XML document.
            </summary>    
        </member>
        <member name="M:Noemax.Xml.XmlSchemaBasedConverter.#ctor(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Creates a new instance of XmlSchemaBasedConverter.
            </summary>
            <param name="schemaSet">
            XML schema to use during converting XML documents.
            </param>
            <param name="validationEventHandler">
            The callback method that will handle XML schema validation events.
            </param> 
        </member>
        <member name="M:Noemax.Xml.XmlSchemaBasedConverter.Convert(System.Xml.XmlWriter,System.Xml.XmlReader)">
            <summary>
            Convert XML stream from the reader into format produced by the writer. 
            </summary>
            <param name="writer">XmlWriter to write the result of conversion.</param>
            <param name="input">XmlReader from which to read the input to convert.</param>        
        </member>
        <member name="P:Noemax.Xml.XmlSchemaBasedConverter.TypedValueCount">
            <summary>
            Reports the number of primitive typed values that were processed by the converter during processing document.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlSchemaBasedConverter.ReaderSettings">
            <summary>
            The settings of the schema validating reader used by XmlSchemaBasedConverter while converting documents.
            </summary>
        </member>
        <member name="T:Noemax.BZip2.BZip2Constants">
             Base class for both the compress and decompress classes.
             Holds common arrays, and static data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="T:Noemax.BZip2.BZip2InputStream">
            <summary>
            An input stream that decompresses from the BZip2 format (with the file 
            header chars) to be read as any other stream.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.BZip2.BZip2InputStream">BZip2InputStream Class</see> 
            with the specified file path.
            </summary>
            <param name="filename"> 
            The path to the file containing the BZip2 compressed data. 
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>Initialize a new instance of 
            <see cref="T:Noemax.BZip2.BZip2InputStream">BZip2InputStream Class</see> 
            with the specified stream.
            </summary>
            <param name="zStream">
            The stream to decompress.
            </param>
            <overloads>
            Initialize a new instance of 
            %BZip2InputStream Class:T:Noemax.BZip2.BZip2InputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Initialize a new instance of 
            <see cref="T:Noemax.BZip2.BZip2InputStream">BZip2InputStream Class</see> 
            with the specified stream.
            </summary>
            <param name="zStream">
            The stream to decompress.
            </param>
            <param name="leaveOpen">
            <strong>True</strong> to leave the underlying stream open after this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.ReadByte">
            <summary>
            Reads a byte from the compressed stream.
            </summary>
            <value>
            The unsigned byte cast to an <b>Int32</b>, or -1 if at the end of the stream.
            </value>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <remarks>
            This method is <b>not supported</b>.
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
            <returns>
            The number of bytes that were decompressed into the byte array. If the end of the
            stream has been reached, zero or the number of bytes read is returned.
            </returns>        
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <i>offset</i> and
            (<i>offset</i> + <i>count</i> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <i>buffer</i> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the current stream.
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">
            A byte offset relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type SeekOrigin indicating the reference point used to obtain the 
            new position.
            </param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            <strong>Always throws a NotSupportedException.</strong>
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">
            The desired length of the current stream in bytes.
            </param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            <strong>Always throws a NotSupportedException.</strong>
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position 
            within this stream by the number of bytes written.
            </summary>
            <param name="buffer">
            An array of bytes. This method copies count bytes from buffer to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <i>buffer</i> at which to begin copying bytes to the current stream. 
            </param>
            <param name="count">
            The number of bytes to be written to the current stream.
            </param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <remarks>
            <strong>Always throws a NotSupportedException.</strong>
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <value>
            <b>true</b> if the stream supports reading; otherwise, <b>false</b>.
            </value>
            <remarks>
            Always returns <b>true</b>.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>
            <b>true</b> if the stream supports seeking; otherwise, <b>false</b>.
            </value>
            <remarks>
            Always returns <b>false</b>.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>
            <b>true</b> if the stream supports writing; otherwise, <b>false</b>.
            </value>
            /// <remarks>
            Always returns <b>false</b>.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value>
            A long value representing the length of the stream in bytes.
            </value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            <strong>Always throws a NotSupportedException.</strong>
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <remarks>
            Always throws a NotSupportedException.
            </remarks>
            <value>
            The current position within the stream.
            </value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            <strong>Always throws a NotSupportedException.</strong>
            </remarks>
        </member>
        <member name="T:Noemax.BZip2.BZip2OutputStream">
             An output stream that compresses into the BZip2 format (with the file
             header chars) into another stream.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
            
             TODO:    Update to BZip2 1.0.1
             <b>NB:</b> note this class has been modified to add a leading BZ to the
             start of the BZIP2 stream to make it compatible with other PGP programs.
            <summary>
            An output stream that compresses into the BZip2 format (with the file 
            header chars) into another stream.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.BZip2.BZip2OutputStream">BZip2OutputStream Class</see> 
            with a filename and compressionLevel.
            </summary>
            <param name="filename">
            The path to the file to which the compressed data will be written.
            </param>
            <param name="compressionLevel">
            The compression level to be applied, were 1 is for fastest compression and 9 for maximum compression.
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of 
            <see cref="T:Noemax.BZip2.BZip2OutputStream">BZip2OutputStream Class</see> 
            with a stream and compression level.
            </summary>
            <param name="inStream">
            The stream to which compressed data will be written.
            </param>
            <param name="compressionLevel">
            The compression level to be applied, were 1 is for fastest 
            compression and 9 for maximum compression.
            </param>
            <overloads>
            Initializes a new instance of 
            <see cref="T:Noemax.BZip2.BZip2OutputStream">BZip2OutputStream Class</see>
            </overloads>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of 
            <see cref="T:Noemax.BZip2.BZip2OutputStream">BZip2OutputStream Class</see> 
            with a stream and compression level.</summary>
            <param name="inStream">
            The stream to which compressed data will be written.
            </param>
            <param name="compressionLevel">
            The compression level to be applied, were 1 is for fastest compression and 9 for maximum compression.
            </param>
            <param name="leaveOpen">
            <b>true</b> to leave the underlying stream open after this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.WriteByte(System.Byte)">
            <summary>
            Write a single byte into the compressed stream.
            </summary>
            <param name="bv">A byte to write.</param>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Finish">
            <summary>
            Finalizes the compression and flushes the compressed data into stream.  
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Flush">
            <summary>
            Flushes compressed data into the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by 
            the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified byte array with the 
            values between offset and (offset + count - 1) replaced by the bytes read from the current source. 
            </param> 
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the data read from the current stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the current stream.
            </param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            <remarks>
            This method is <strong>not supported</strong> and always throws a <strong>NotSupportedException</strong>.
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">
            A byte offset relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type SeekOrigin indicating the reference point used to obtain the new position.
            </param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            This method is <strong>not supported</strong> and always throws a <strong>NotSupportedException</strong>.
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">
            The desired length of the current stream in bytes.
            </param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support both writing and seeking.
            </exception>
            <remarks>
            This method is <strong>not supported</strong> and always throws a <strong>NotSupportedException</strong>.
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position 
            within this stream by the number of bytes written.
            </summary>
            <param name="buffer">
            An array of bytes. This method copies count bytes from buffer to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin copying bytes to the current stream.
            </param>
            <param name="count">
            The number of bytes to be written to the current stream. 
            </param>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            /// <value>
            true if the stream supports reading; otherwise, false.
            </value>
            <remarks>
            Always returns <strong>false</strong>.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>
            true if the stream supports seeking; otherwise, false.
            </value>
            <remarks>
            Always returns <strong>false</strong>.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>
            true if the stream supports writing; otherwise, false.
            </value>
            <remarks>
            If the stream is closed, this property returns false.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value>
            A long value representing the length of the stream in bytes.
            </value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            Always throws a NotSupportedException.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <remarks>
            Always throws a NotSupportedException.
            </remarks>
            <value>
            The current position within the stream.
            </value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        </member>
        <member name="T:Noemax.BZip2.CRC">
             A simple class the hold and calculate the CRC for sanity checking
             of the data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="T:Noemax.GZip.Deflate">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.ZStream">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.ZLIB_VERSION">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.MIN_MATCH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.MAX_MATCH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.PRESET_DICT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_FILTERED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_HUFFMAN_ONLY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_RLE">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_FIXED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_DEFAULT_STRATEGY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_NULL">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_OK">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_STREAM_END">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_NEED_DICT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_ERRNO">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_STREAM_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_DATA_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_MEM_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_BUF_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_VERSION_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_NO_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_PARTIAL_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_SYNC_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_FULL_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_FINISH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_BLOCK">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_TREES">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_DEFLATED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.next_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.next_in_index">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.avail_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.total_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.next_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.next_out_index">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.avail_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.total_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.data_type">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.adler">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.msg">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.ZStream.ERR_MSG(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.ZStream.ERR_RETURN(Noemax.GZip.ZStream,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.ZStream.MemZero(System.Byte[],System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflateInit(System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflateInit(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.FlushOutput(System.Byte[],System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflate(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflateEnd">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.DeflateInputStream">
            <summary>
            Provides methods and properties for decompressing streams using the DEFLATE algorithm.
            </summary>
            <remarks>
            <para>By default, DeflateInputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para> 
            <para> There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %DeflateInputStream%
            </summary>   
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %DeflateInputStream%.
            </summary>   
            <param name="stream">The stream to decompress.</param>        
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of %DeflateInputStream%.
            </summary>   
            <param name="stream">The stream to decompress.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
            <param name="zlibFormat">
            	<para>If <strong>true</strong> the underlying stream is expected to be RFC1950 Zlib format stream.</para>
            </param>          
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %DeflateInputStream%.
            </summary>   
            <param name="stream">The stream to decompress.</param> 
            <overloads>
            Initializes a new instance of %DeflateInputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="buffer">
            An array of bytes. This method copies <b>count</b> bytes
            from <b>buffer</b> to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin copying bytes to the current stream.
            </param>
            <param name="count"><para>The number of bytes to be written to the current stream.</para></param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <returns>
            The number of bytes that were decompressed into the byte array. If the end of the
            stream has been reached, zero or the number of bytes read is returned.
            </returns>
            <remarks>
            If data is found in an invalid format, an <b>IOException</b> is
            thrown.
            </remarks>
            <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Restart">
            <summary>
            Restarts the decompression starting from current possition of the underlying stream.
            </summary>        
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Flush">
            <summary>This method is not supported.</summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the %DeflateInputStream% 
            and optionally releases the managed resources. 
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources; 
            <b>false</b> to release only unmanaged resources.
            </param>  
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanRead">
            <summary>This property always returns <strong>true</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanWrite">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.Length">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.Position">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.BytesBuffered">
            <summary>
            Returns the number of unprocessed bytes in DeflateInputStream buffer.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.ForceBuffering">
            <summary>
            Specifies whether to force buffering input data. Default value is <b>true</b>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            	The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>   
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks> 
        </member>
        <member name="T:Noemax.GZip.DeflateOutputStream">
            <summary>
            Provides methods and properties for compressing streams using the DEFLATE algorithm.
            </summary>
            <remarks>
            <para>By default, DeflateOutputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para> 
            <para> There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of %DeflateOutputStream% class.
            </summary>
            <param name="fileName">The path to the file to which compressed data will be written.</param> 
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of %DeflateOutputStream% class.
            </summary>  
            <param name="stream">The stream to which the compressed data will be written.</param>
            <param name="compressionLevel">Specifies the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of %DeflateOutputStream% class.
            </summary>        
            <param name="stream">The stream to which the compressed data will be written.</param>
            <param name="compressionLevel">Specifies the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
            <param name="zlibFormat">
            	<para>If <strong>true</strong> RFC1950 Zlib format will be used to write DEFLATE stream.</para>
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance %DeflateOutputStream% class.
            </summary>
            <param name="stream">The stream to which the compressed data will be written.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <overloads>
            Initializes a new instance %DeflateOutputStream% class.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes compressed bytes to the underlying stream from the specified byte
            array.
            </summary>
            <returns>The number of bytes compressed into the stream.</returns>
            <remarks>
            The write might not occur immediately since it is buffered until the buffer size
            is reached or until the %Flush%, %Finish% or %Close% method is
            called.
            </remarks>
            <param name="buffer">The array containing the bytes to compress.</param>
            <param name="offset">
            	<para>The zero-based byte offset in the <b>buffer</b> at
                which to begin compressing and copying bytes to the current stream.</para>
            </param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number
            of bytes requested if that many bytes are not currently available, or zero (0) if the
            end of the stream has been reached.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the bytes read from the current source.
            </param>
            <param name="offset">
            	<para>The zero-based byte offset in <b>buffer</b> at which
                to begin storing the data read from the current stream.</para>
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Flush">
            <summary>Flushes the content of the internal buffer to the underlying stream.</summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Finish">
            <summary>
            Concludes compression and flushes the content of the internal buffer to the
            underlying stream.
            </summary>
            <remarks>
            	<para><strong>Finish</strong> concludes compression by writing the markup
                indicating the end of compressed data and flushing the content of the internal
                buffer.</para>
            	<para>After this method has been called, no more data can be written to this
                stream.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Close">
            <summary>Flushes the content of internal buffer and closes the current stream.</summary>
            <remarks>
            	<para>If this stream had been initialized with <strong>_leaveOpen</strong> set to
                <strong>true</strong>, the underlying stream remains open after this method is
                called, otherwise the underlying stream is also closed.</para>
            	<para>If %Finish% has not yet been called, <strong>Close</strong> will call <strong>Finish</strong>
                before closing the stream. Do not close the underlying stream before closing this
                stream.</para>
            </remarks>
            <seealso cref="T:Noemax.GZip.DeflateOutputStream">DeflateOutputStream Constructor</seealso>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the DeflateOutputStream
            and optionally releases the managed resources. 
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Restart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanRead">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanWrite">
            <summary>Gets a value indicating whether the stream supports writing.</summary>
            <remarks>
            This property is always <strong>true</strong> if %Finish% has not been
            called. After <strong>Finish</strong> has been called this property is
            <strong>false</strong>.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.Length">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.Position">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            	The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>   
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks> 
        </member>
        <member name="T:Noemax.GZip.DeflateStream">
            <summary>
            Provides methods and properties for processing streams using the DEFLATE algorithm.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.String,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of DeflateStream class.
            </summary>
            <remarks>
            By default, DeflateStream owns the underlying stream, so closing the stream also closes the underlying stream.
            There is no limit in the size of the stream to be compressed.
            </remarks>        
            <param name="fileName">The path to the file where to write compressed data or read compressed data from.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks>
            	<para>By default <strong>DeflateStream</strong> owns the underlying stream, so
                closing this <b>stream</b> also closes the underlying
                stream. Note that the state of the underlying stream can affect the usability of
                this stream.</para>
            </remarks>
            <overloads>
            Initializes a new instance of the %DeflateStream% class.
            </overloads>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Boolean)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks>
            	<para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
                stream also closes the underlying stream. Note that the state of the underlying
                stream can affect the usability of the stream. Also, no explicit checks are
                performed, so no additional exceptions are thrown when the new instance is
                created.</para>
            	<para>If an instance of the <b>DeflateStream</b> class is created with the
                <b>mode</b> parameter equal to <b>Compress</b>, header
                information is inserted immediately. If no further action occurs, the stream
                appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks>
            	<para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
                stream also closes the underlying stream. Note that the state of the underlying
                stream can affect the usability of the stream. Also, no explicit checks are
                performed, so no additional exceptions are thrown when the new instance is
                created.</para>
            	<para>If an instance of the <b>DeflateStream</b> class is created with the
                <b>mode</b> parameter equal to <b>Compress</b>, header
                information is inserted immediately. If no further action occurs, the stream
                appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
            <param name="zlibFormat">
            <para>If <strong>true</strong> the stream is to be RFC1950 Zlib format stream.</para>
            </param>        
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks>
            <para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
            stream also closes the underlying stream. Note that the state of the underlying
            stream can affect the usability of the stream. Also, no explicit checks are
            performed, so no additional exceptions are thrown when the new instance is
            created.</para>
            <para>If an instance of the <b>DeflateStream</b> class is created with the
            <b>mode</b> parameter equal to <b>Compress</b>, header
            information is inserted immediately. If no further action occurs, the stream
            appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks>
            <para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
            stream also closes the underlying stream. Note that the state of the underlying
            stream can affect the usability of the stream. Also, no explicit checks are
            performed, so no additional exceptions are thrown when the new instance is
            created.</para>
            <para>If an instance of the <b>DeflateStream</b> class is created with the
            <b>mode</b> parameter equal to <b>Compress</b>, header
            information is inserted immediately. If no further action occurs, the stream
            appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks><para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
            stream also closes the underlying stream. Note that the state of the underlying
            stream can affect the usability of the stream. Also, no explicit checks are
            performed, so no additional exceptions are thrown when the new instance is created.</para>
            <para>If an instance of the <b>DeflateStream</b> class is created with the 
            <b>mode</b> parameter equal to <b>Compress</b>, header
            information is inserted immediately. If no further action occurs, the stream
            appears as a valid, empty, compressed file.</para></remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="zlibFormat">
            <para>If <strong>true</strong> the stream is to be RFC1950 Zlib format stream.</para>
            </param>        
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Flush">
            <summary>Flushes the content of the internal buffer to the underlying stream.</summary>
            <remarks><para>When writing using the <see cref="M:Noemax.GZip.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">Write</see> method, the
            data may not be written to the stream since writing the data back in chunks can provide better performance. Calling the 
            <b>Flush</b> method forces the data to be written.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <returns>
            The number of bytes that were decompressed into the byte array. If the end of the
            stream has been reached, zero or the number of bytes read is returned.
            </returns>
            <remarks>
            If data is found in an invalid format, an <b>IOException</b> is
            thrown.
            </remarks>
            <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a <strong>NotSupportedException</strong>.
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a <strong>NotSupportedException</strong>.
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes compressed bytes to the underlying stream from the specified byte array.
            </summary>
            <returns>The number of bytes compressed into the stream.</returns>
            <remarks>
            The write might not occur immediately since it is buffered until the buffer size
            is reached or until the
            <see cref="M:Noemax.GZip.DeflateStream.Flush">Flush</see>,       
            <see cref="M:Noemax.GZip.DeflateStream.Close">Close</see> method is called.
            </remarks>
            <param name="buffer">The array containing the bytes to compress.</param>
            <param name="offset">
            <para>The zero-based byte offset in the <b>buffer</b> at
            which to begin compressing and copying bytes to the current stream.</para>
            </param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Dispose(System.Boolean)">
            <summary>Flushes the content of internal buffer and closes the current stream.</summary>
            <remarks>
            <para>If this stream had been initialized with <strong>_leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is
            called, otherwise the underlying stream is also closed.</para>        
            </remarks>
            <seealso cref="T:Noemax.GZip.GZipStream">GZipStream Constructor</seealso>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Close">
            <summary>Flushes the content of internal buffer and closes the current stream.</summary>
            <remarks>
            <para>If this stream had been initialized with <strong>leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is
            called, otherwise the underlying stream is also closed.</para>
            </remarks>
            <seealso cref="T:Noemax.GZip.GZipStream">GZipStream Constructor</seealso>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanRead">
            <summary>Gets a value indicating whether the stream supports reading.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanWrite">
            <summary>Gets a value indicating whether the stream supports writing.</summary>        
        </member>
        <member name="P:Noemax.GZip.DeflateStream.Length">
            <summary>
            This property is not supported and always throws a <strong>NotSupportedException</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.Position">
            <summary>
            This property is not supported and always throws a <strong>NotSupportedException</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.DeflateStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>        
        </member>
        <member name="T:Noemax.GZip.ExtraFieldCollection">
            <summary>Represents a collection of GZip header fields.</summary>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Add(System.Int32,System.Byte[])">
            <summary>Adds the header to the list of GZip headers.</summary>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and ID2),
                which can be represented as a single 16-bit unsigned integer where ID1 is the most
                significant 8 bits and ID2 is the less significant 8 bits of its binary
                representation.</para>
            	<para>Use this method if it's more comfortable to provide the ID as a single
                <strong>Int16</strong> value. To provide the ID as two 8-bit fields use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Add(System.Byte,System.Byte,System.Byte[])">Add(Byte,
                Byte, Byte[])</see> overload.</para>
            </remarks>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
            <param name="data">The array of bytes to be stored in header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Add(System.Byte,System.Byte,System.Byte[])">
            <summary>Adds the header to the list of GZip headers.</summary>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and
                ID2).</para>
            	<para>Use this method if it's more comfortable to provide the ID as two 8-bit
                values. To provide the ID as a single 16-bit unsigned integer use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Add(System.Int32,System.Byte[])">Add(Int32,
                Byte[])</see> overload.</para>
            </remarks>
            <param name="id1">The 8-bit ID1 value.</param>
            <param name="id2">The 8-bit ID2 value.</param>
            <param name="data">The array of bytes to be stored in the header field.</param>
            <overloads>
            Adds the header to the list of GZip headers.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.GetByID(System.Int32)">
            <summary>
            Gets the header associated with the ID represented as a 16-bit unsigned
            integer.
            </summary>
            <returns>The array of bytes stored in the header field.</returns>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and ID2),
                which can be represented as a single 16-bit unsigned integer where ID1 is the most
                significant 8 bits and ID2 is the less significant 8 bits of its binary
                representation.</para>
            	<para>Use this method if it's more comfortable to provide the ID as a single
                <strong>Int16</strong> value. To provide the ID as two 8-bit fields use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Get(System.Byte,System.Byte)">Get(Byte,
                Byte)</see> overload.</para>
            </remarks>
            <overloads>Gets the header.</overloads>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Get(System.Byte,System.Byte)">
            <summary>
            Gets the GZip header associated with the ID represented as two ANSI character
            octet.
            </summary>
            <returns>The array of bytes stored in the header field.</returns>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and
                ID2).</para>
            	<para>Use this method if it's more comfortable to provide the ID as two 8-bit
                values. To provide the ID as a single 16-bit unsigned integer use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Get(System.Int32)">Get(Int32)</see>
                overload.</para>
            </remarks>
            <param name="id1">The 8-bit ID1 value.</param>
            <param name="id2">The 8-bit ID2 value.</param>
            <overloads>
            Gets the GZip header.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Get(System.Int32)">
            <summary>Gets the GZip header specified by its index in the list of headers.</summary>
            <returns>The array of bytes stored in the header field.</returns>
            <param name="index">The index of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Remove(System.Int32)">
            <summary>Removes the header with the specified index.</summary>
            <param name="index">The index of header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.RemoveByID(System.Int32)">
            <summary><para>Removes the header specified by the 16-bit unsigned integer ID.</para></summary>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Clear">
            <summary>Clears the list of GZip headers.</summary>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.CopyTo(Noemax.GZip.GZipHeaderField[],System.Int32)">
            <summary>
            Copies the content of the collection into an array of
            <see cref="T:Noemax.GZip.GZipHeaderField">GZipHeaderField</see>.
            </summary>
            <param name="array">
            The destination array of
            <see cref="T:Noemax.GZip.GZipHeaderField">GZipHeaderField</see>.
            </param>
            <param name="arrayIndex">
            	<para>The index in the destination <b>array</b> at which to
                begin copying .</para>
            </param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.GetEnumerator">
            <summary>Gets a list of items in a collection.</summary>
            <returns>
            An <strong>IEnumerator</strong> object that can be used to iterate through the
            collection.
            </returns>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.Count">
            <summary>Gets the number of contained headers.</summary>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.Item(System.Int32)">
            <summary>Gets the header at the specified index.</summary>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.IsReadOnly">
            <summary>Gets a value indicating whether the collection is read-only.</summary>
        </member>
        <member name="T:Noemax.GZip.GZipHeaderField">
            <summary>Represents a GZip header field.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.ID">
            <summary>The 16-bit identifier of the header field (concatenated ID1 and ID2).</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.ID1">
            <summary>The 8-bit ID1 identifier.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.ID2">
            <summary>The 8-bit ID2 identifier.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.Data">
            <summary>The data contained in the header field.</summary>
        </member>
        <member name="T:Noemax.GZip.GZipInputStream">
            <summary>    
            Provides methods and properties to decompress GZIP stream.
            </summary>
            <remarks>
            <para>By default, GZipInputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para> 
            <para> There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.GZip.GZipInputStream">GZipInputStream</see>
            class.
            </summary>  
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.GZip.GZipInputStream">GZipInputStream</see> class.
            </summary>        
            <param name="stream">The stream to decompress.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of 
            <see cref="T:Noemax.GZip.GZipInputStream">GZipInputStream</see> class.
            </summary>        
            <param name="stream">The stream to decompress.</param>
            <overloads>
            Initializes a new instance of 
            %GZipInputStream:T:Noemax.GZip.GZipInputStream% class.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.ReadHeader">
            <summary>
            Reads the GZIP header from the stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Flush">
            <summary>This method is not supported.</summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
            <returns>
            The number of bytes that were decompressed into the byte array. If the end of the
            stream has been reached, zero or the number of bytes read is returned.
            </returns>
            <remarks>
            	<para>If data is found in an invalid format, an <b>IOException</b> is
                thrown. A cyclic redundancy check (CRC) is performed when all data up to the end of
                stream have been read.</para>
            </remarks>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="buffer">
            An array of bytes. This method copies <b>count</b> bytes
            from <b>buffer</b> to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin copying bytes to the current stream.
            </param>
            <param name="count"><para>The number of bytes to be written to the current stream.</para></param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the %GZipInputStream% and optionally releases the managed resources. 
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanRead">
            <summary>
            Gets a value indicating whether the stream supports reading while decompressing a file.
            </summary>
            <remarks>
            Returns <strong>true</strong> if the underlying stream supports reading and is
            not closed.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.<!--DXMETADATA end --></summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanWrite">
            <summary>This property always returns <strong>false</strong>.<!--DXMETADATA end --></summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Length">
            <summary>Gets the length in bytes of the underlying stream.</summary>
            <remarks>
            	<strong>GZipInputStream</strong> will try to read the <strong>Length</strong>
            property of the underlying stream. Check the the <strong>Length</strong> property
            documentation of the underlying stream for more information.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Position">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ExtraFields">
            <summary>The collection of extra-fields read from the GZip header.</summary>
            <remarks>
            If the GZip header does not contain any extra-fields this property returns an
            empty
            <see cref="T:Noemax.GZip.ExtraFieldCollection">ExtraFieldCollection</see>.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ParseExtraFields">
            <summary>
            Gets and sets whether the reader should parse the extra-fields stored in the GZip
            header.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CheckCRC">
            <summary>
            Gets and sets whether to check CRC of the decompressed data.
            </summary>
            <value>
             <b>true</b> if CRC of decompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CheckLength">
            <summary>
            Gets and sets whether to check the length of uncompressed data.
            </summary>
            <remarks>  
            The length check can fail on the files that are bigger than 4GB, since GZIP header does not support 
            serializing bigger number. For this reason it's recommended to set this property to <strong>false</strong> 
            in cases when original data might exceed the 4294967295 bytes.
            </remarks> 
            <value>
             <b>true</b> if the length of uncompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Filename">
            <summary>Gets the filename specified in the GZip header.</summary>
            <remarks>
            If the filename is not present in the GZip header it returns
            <strong>null</strong> (<strong>Nothing</strong> for Visual Basic).
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.FileComments">
            <summary>
            Gets the comments specified in the GZip header.  
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.FileTime">
            <summary>
            Gets an original file last modified time.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>        
        </member>
        <member name="T:Noemax.GZip.GZipOutputStream">
            <summary>
            Provides the compression stream writing GZip streams and files.
            </summary>
            <remarks>
            <para>By default, GZipOutputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para> 
            <para> There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.String,System.Int32)">
            <summary> Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream">GZipOutputStream</see>
            class.</summary>
            <param name="fileName">The path to the file to which the compressed data will be written.</param>        
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>        
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.GZip.GZipOutputStream">GZipOutputStream</see>
            class.
            </summary>    
            <param name="stream">The stream to to which the compressed data will be written.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream">GZipOutputStream</see> class.
            </summary>      
            <param name="stream">The stream to to which the compressed data will be written.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <overloads>
            Initializes a new instance of the 
            %GZipOutputStream:T:Noemax.GZip.GZipOutputStream% class.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Flush">
            <summary>Flushes the content of the internal buffer to the underlying stream.</summary>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number
            of bytes requested if that many bytes are not currently available, or zero (0) if the
            end of the stream has been reached.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the bytes read from the current source.
            </param>
            <param name="offset">
            	<para>The zero-based byte offset in <b>buffer</b> at which
                to begin storing the data read from the current stream.</para>
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes compressed bytes to the underlying stream from the specified byte
            array.
            </summary>
            <returns>The number of bytes compressed into the stream.</returns>
            <remarks>
            	<para>The write might not occur immediately since it is buffered until the buffer
                size is reached or until the
                <see cref="M:Noemax.GZip.GZipStream.Flush">Flush</see> method is called or 
                 the stream is closed.
            </para>
            	<para>Upon the first write operation <strong>GZipOutputStream</strong> will write
                the GZip header into the underlying stream, therefore all required headers have to
                be specified before the first write operation.</para>
            </remarks>
            <param name="buffer">The array containing the bytes to compress.</param>
            <param name="offset">
            	<para>The zero-based byte offset in the <b>buffer</b> at
                which to begin compressing and copying bytes to the current stream.</para>
            </param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the %GZipOutputStream% and optionally releases the managed resources. 
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>       
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanRead">
            <summary>This property always returns <strong>false</strong>.<!--DXMETADATA end --></summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.<!--DXMETADATA end --></summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanWrite">
            <summary>Gets a value indicating whether the stream supports writing.</summary>
            <remarks>
            Returns <strong>true</strong> if the underlying stream supports writing and is
            not closed; otherwise, <b>false</b>.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Length">
            <summary>Gets the length in bytes of the underlying stream.</summary>
            <remarks>
            	<strong>GzipOutputStream</strong> will try to readthe <strong>Length</strong>
            property of the underlying stream. Check the <strong>Length</strong> property
            documentation the underlying stream for more information .
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Position">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Filename">
            <summary>
            Gets and sets the filename to write into the GZip header.
            </summary>
            <remarks>
            <para>You can provide the name of the compressed file to be written into the GZip
            header by setting this property.</para>
            <para>The GZip header will be written during the first write operation, therefore
            this property should be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.FileTime">
            <summary>
            The original last modified time of the compressed file.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Comments">
            <summary>Gets and sets the file comments to write into the GZip header.</summary>
            <remarks>
            <para>You can provide the comments for the compressed file to be written into the
            GZip header by setting this property.</para>
            <para>The GZip header will be written during the first write operation, therefore
            this property has to be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.ExtraFields">
            <summary>The collection of extra-fields to write into the GZip header.</summary>
            <remarks>
            <para>You can provide the set of extra-fields to be written into the GZip header by
            modifying this collection.</para>
            <para>The GZip header will be written during the first write operation, therefore
            the extra-header fields should be specified before writing any data into the
            stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>
        </member>
        <member name="T:Noemax.GZip.CompressionMode">
            <summary>
            Defines the compression modes for GZipStream.
            </summary>    
        </member>
        <member name="F:Noemax.GZip.CompressionMode.Compress">
            <summary>
            To compress data.
            </summary>
        </member>
        <member name="F:Noemax.GZip.CompressionMode.Decompress">
            <summary>
            To decompress data.
            </summary>
        </member>
        <member name="T:Noemax.GZip.GZipStream">
            <summary>
            Provides methods and properties for processing streams using GZIP.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.String,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the %GZipStream% class.
            </summary>        
            <param name="fileName">The path to the file to which the compressed data will be written or from which the data 
            to be decompressed will be read.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the %GZipStream% class.
            </summary>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be decompressed will be read.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <overloads>
            Initializes a new instance of the %GZipStream% class.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Boolean)">
            <summary>
            Initializes a new instance of the %GZipStream% class.
            </summary>
            <remarks>
            	<para>If an instance of the <b>GZipStream</b> class is created with the
                <b>mode</b> parameter equal to <b>Compress</b>, header
                information is inserted immediately. If no further action occurs, the stream
                appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be 
            decompressed will be read.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the %GZipStream% class.
            </summary>
            <remarks>
            <para>If an instance of the <b>GZipStream</b> class is created with the
               <b>mode</b> parameter equal to <b>Compress</b>, header
               information is inserted immediately. If no further action occurs, the stream
               appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be decompressed will be read.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32)">
            <summary>
            Initializes a new instance of the %GZipStream% class.
            </summary>
            <remarks>
            <para>If an instance of the <b>GZipStream</b> class is created with the
               <b>mode</b> parameter equal to <b>Compress</b>, header
               information is inserted immediately. If no further action occurs, the stream
               appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be decompressed will be read.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Flush">
            <summary>Flushes the content of the internal buffer to the underlying stream.</summary>
            <remarks>
            <para>When writing using the
            <see cref="M:Noemax.GZip.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">Write</see> method, the data may not be 
            written to the stream since writing the data back in chunks can provide better performance.
            Calling the <b>Flush</b> method forces the data to be
            written.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
            <returns>
            The number of bytes that were decompressed into the byte array. If the end of the
            stream has been reached, zero or the number of bytes read is returned.
            </returns>
            <remarks>
            If data is found in an invalid format, an <b>IOException</b> is
            thrown.
            </remarks>
            <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes compressed bytes to the underlying stream from the specified byte
            array.
            </summary>
            <returns>The number of bytes compressed into the stream.</returns>
            <remarks>
            The write might not occur immediately since it is buffered until the buffer size
            is reached or until the
            <see cref="M:Noemax.GZip.GZipStream.Flush">Flush</see> method is called or 
            the stream is closed.
            </remarks>
            <param name="buffer">The array containing the bytes to compress.</param>
            <param name="offset">
            	<para>The zero-based byte offset in the <b>buffer</b> at
                which to begin compressing and copying bytes to the current stream.</para>
            </param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the %GZipOutputStream% and optionally releases the managed resources. 
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>  
        </member>
        <member name="P:Noemax.GZip.GZipStream.Filename">
            <summary>Gets and sets the filename to write into or read from the GZip header.</summary>
            <remarks>
            	<para>You can provide the name of the compressed file to be written into the GZip
                header by setting this property.</para>
            	<para>The GZip header will be written during the first write operation, therefore
                this property should be specified before writing any data into the stream.</para>
                <para>The GZip header will be written during the first write operation, therefore
                this property should be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanRead">
            <summary>Gets a value indicating whether the stream supports reading.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanWrite">
            <summary>Gets a value indicating whether the stream supports writing.</summary>        
        </member>
        <member name="P:Noemax.GZip.GZipStream.CheckCRC">
            <summary>
            Gets and sets whether to check CRC of the decompressed data.
            </summary>
            <value>
             <b>true</b> if CRC of decompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CheckLength">
            <summary>
            Gets and sets whether to check the length of uncompressed data.
            </summary>
            <value>
             <b>true</b> if the length of uncompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipStream.Length">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.Position">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.GZipStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.GZipStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>        
        </member>
        <member name="T:Noemax.GZip.Inflate">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Inflate.inflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Inflate.inflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Inflate.inflateInit">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Inflate.inflate(System.Int32)">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.InvalidInputException">
            <summary>
            The exception that is thrown when a compressed input stream is in an invalid
            format.
            </summary>
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.GZip.InvalidInputException">InvalidInputException</see>
            class.
            </summary>
            <overloads>
            Initializes a new instance of the
            <see cref="T:Noemax.GZip.InvalidInputException">InvalidInputException</see>
            class.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.GZip.InvalidInputException">InvalidInputException</see>
            class with a specified error message.
            </summary>
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.GZip.InvalidInputException">InvalidInputException</see>
            class with a reference to the inner exception that is the cause of this
            exception.
            </summary>
        </member>
        <member name="T:Noemax.GZip.ZStreamDataType">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStreamDataType.Z_BINARY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStreamDataType.Z_TEXT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStreamDataType.Z_ASCII">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStreamDataType.Z_UNKNOWN">
            <summary/>
        </member>
        <member name="T:LZF.NET.CLZF">
            <summary>
            Summary description for CLZF.
            </summary>
        </member>
        <member name="F:LZF.NET.CLZF.HLOG">
            <summary>
            LZF Compressor
            </summary>
        </member>
        <member name="M:LZF.NET.CLZF.lzf_decompress(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            LZF Decompressor
            </summary>
        </member>
        <member name="T:Noemax.Lzf.Lzf3InputStream">
            <summary>    
            Provides methods and properties to decompress streams compressed by LZF3 compression algorithm.
            </summary>
            <remarks> 
            <para>By default, Lzf3InputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks>
        </member>
        <member name="F:Noemax.Lzf.Lzf3InputStream.HLOG">
            <summary>
            LZF Compressor
            </summary> 
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %Lzf3InputStream%.
            </summary>
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %Lzf3InputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>     
            <overloads>
            Initializes a new instance of %Lzf3InputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %Lzf3InputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>        
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.Close">
            <summary>
            Closes the stream.
            </summary>  
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.Flush">
            <summary>Not supported.</summary> 
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the data from compressed stream and decompresses it into a specified array of bytes.
            </summary>
            <param name="buffer">The buffer where to store dompressed bytes.</param>
            <param name="offset">The offset in the buffer where to store decompressed bytes.</param>
            <param name="count">The number of bytes to decompress.</param>
            <returns>The number of bytes decompressed.</returns>
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Calls the Seek method of the underlying stream. </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.SetLength(System.Int64)">
            <summary>Calls the SetLength method of the underlying stream.</summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.CanTimeout">
            <summary>Gets the <see cref="P:System.IO.Stream.CanTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.WriteTimeout">
            <summary> Gets and sets the <see cref="P:System.IO.Stream.WriteTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.ReadTimeout">
            <summary> Gets and sets the <see cref="P:System.IO.Stream.ReadTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.CanRead">
            <summary>
            Gets the value of CanRead property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.CanSeek">
            <summary>
            Gets the value of CanSeek property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.CanWrite">
            <summary>Always returns <b>false</b>.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.Length">
            <summary>Gets the Length property of the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.Position">
            <summary>
            Get and set the possition of underlying compressed stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.CanReadWithoutInput">
            <summary>
            Gets the value that indicates whether the Lzf3InputStream have bytes buffered
            in its internal buffer and can return bytes without reading from the underlying stream.
            </summary>
            <value>
            Returns <b>true</b> if this Lzf3InputStream can read some amount of bytes without reading from
            the underlying stream; returns <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Noemax.Lzf.Lzf3OutputStream">
            <summary>    
            Provides methods and properties to compress streams using LZF3 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf3OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %Lzf3OutputStream%. 
            </summary>
            <param name="fileName">The file to which compressed data will be written.</param>        
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %Lzf3OutputStream%. 
            </summary>
            <param name="stream">
            The stream to which compressed data will be written.
            </param>        
            <overloads>
            Initializes a new instance of %Lzf3OutputStream%. 
            </overloads>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %Lzf3OutputStream%. 
            </summary>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.Close">
            <summary>
            Flushes the buffer and closes the stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.Flush">
            <summary>
            Flushes the buffered compressed data into underlying stream and flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calls the <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> method of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.SetLength(System.Int64)">
            <summary>
            Calls the <see cref="M:System.IO.Stream.SetLength(System.Int64)"/> method of the underlying stream.
            </summary>
            <param name="value">The value to set as length of the stream.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses bytes from the specified array of bytes and writers them into stream.
            </summary>
            <param name="buffer">The buffer with bytes to compress.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.CanRead">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.CanSeek">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanSeek"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.CanWrite">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanWrite"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.Length">
            <summary>
            Gets the <see cref="P:System.IO.Stream.Length"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.Position">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.Position"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.CanTimeout">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.WriteTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.WriteTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.ReadTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.ReadTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.Lzf4Decoder">
            <summary>    
            Provides methods and properties to compress streams using LZF3 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf3OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Lzf4Decoder.#ctor">
            <summary>
            Initializes a new instance of %Lzf3OutputStream%. 
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4Decoder.Decompress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.Lzf4Encoder">
            <summary>    
            Provides methods and properties to compress streams using LZF3 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf3OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Lzf4Encoder.#ctor">
            <summary>
            Initializes a new instance of %Lzf3OutputStream%. 
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4Encoder.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Lzf4Encoder.Reset">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.Lzf4InputStream">
            <summary>    
            Provides methods and properties to decompress streams compressed by LZF4 compression algorithm.
            </summary>
            <remarks> 
            <para>By default, Lzf4InputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %Lzf4InputStream% that reads compressed data from the specified file.
            </summary>
            <param name="filename">The path to the file to read compressed data from.</param>                
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %Lzf4InputStream% that reads compressed data from the specified stream.
            </summary>
            <param name="stream">The stream to read compressed data from.</param>     
            <overloads>
            Initializes a new instance of %Lzf4InputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %Lzf4InputStream% that reads compressed data from the specified stream.
            </summary>
            <param name="stream">The stream to decompress.</param>        
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Flush">
            <summary>Not supported.</summary> 
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the data from compressed stream and decompresses it into a specified array of bytes. 
            </summary>
            <param name="buffer">The buffer where to store dompressed bytes.</param>
            <param name="offset">The offset in the buffer where to store decompressed bytes.</param>
            <param name="count">The number of bytes to decompress.</param>
            <returns>The number of bytes decompressed.</returns>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Calls the <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> method of the underlying stream. </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.SetLength(System.Int64)">
            <summary>Calls the <see cref="M:System.IO.Stream.SetLength(System.Int64)"/> method of the underlying stream.</summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary> Not supported. </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanRead">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanRead"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanSeek">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanSeek"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanWrite">
            <summary>Always returns <b>false</b>.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.Length">
            <summary>Gets the <see cref="P:System.IO.Stream.Length"/> property value of the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.Position">
            <summary>Gets and sets the <see cref="P:System.IO.Stream.Position"/> property value of the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanTimeout">
            <summary>Gets the <see cref="P:System.IO.Stream.CanTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.WriteTimeout">
            <summary> Gets and sets the <see cref="P:System.IO.Stream.WriteTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.ReadTimeout">
            <summary> Gets and sets the <see cref="P:System.IO.Stream.ReadTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="T:Noemax.Lzf.Lzf4OutputStream">
            <summary>    
            Provides methods and properties to compress streams using LZF4 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf4OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %Lzf4OutputStream% that writes compressed data into the specified file. 
            </summary>
            <param name="filename">The file to which compressed data will be written.</param>     
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %Lzf4OutputStream% that writes compressed data into the specified stream.
            </summary>
            <param name="stream">The stream to which compressed data will be written.</param>     
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %Lzf4OutputStream% that writes compressed data into the specified stream. 
            </summary>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Flush">
            <summary>
            Flushes the buffered compressed data into underlying stream and flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calls the Seek method of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.SetLength(System.Int64)">
            <summary>
            Calls the SetLength method of the underlying stream.
            </summary>
            <param name="value">The value to set as length of the stream.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses bytes from the specified array of bytes and writers them into the stream.
            </summary>
            <param name="buffer">The buffer containing bytes to compress.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanRead">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanSeek">
            <summary>
            Gets the value of the CanSeek property from the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanWrite">
            <summary>
            Gets the value of the CanWrite property from the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.Length">
            <summary>
            Gets the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.Position">
            <summary>
            Gets and sets the possition of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanTimeout">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.WriteTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.WriteTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.ReadTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.ReadTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.LzfInputStream">
            <summary>    
            Provides methods and properties to decompress streams compressed by LZF compression algorithm.
            </summary>
            <remarks>
            <para>By default, LzfInputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %LzfInputStream%.
            </summary>
            <param name="fileName">The path to the file from which to read copressed data from.</param>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %LzfInputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>
            <overloads>
            Initializes a new instance of %LzfInputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %LzfInputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>        
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.Flush">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the data from compressed stream and decompresses it into specified buffer. 
            </summary>
            <param name="buffer">The buffer where to store dompressed bytes.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.CanRead">
            <summary>
            Gets the CanRead property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.CanSeek">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.CanWrite">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.Length">
            <summary>
            Returns the length of underlying compressed stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.Position">
            <summary>
            Get and set the possition of underlying compressed stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.CanTimeout">
            <summary>
            Gets the CanTimeout property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>
        </member>
        <member name="T:Noemax.Lzf.LzfOutputStream">
            <summary>    
            Provides methods and properties to compress streams using LZF compression algorithm.
            </summary>
            <remarks>
            <para>By default, LzfOutputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %LzfOutputStream%. 
            </summary>
            <param name="filename">The path to the file to which the compressed data will be written.</param>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %LzfOutputStream%. 
            </summary>
            <param name="stream">
            The stream to which compressed data will be written.
            </param>
            <overloads>
            Initializes a new instance of %LzfOutputStream%. 
            </overloads>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %LzfOutputStream%. 
            </summary>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.Flush">
            <summary>
            Flushes the buffered compressed data into underlying stream and flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>       
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses bytes from the specified byte array and writers them into stream.
            </summary>
            <param name="buffer">The buffer containing bytes to compress.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.CanRead">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.CanSeek">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.CanWrite">
            <summary>
            Returns the value of CanWrite property of underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.Length">
            <summary>
            Gets the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.Position">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.CanTimeout">
            <summary>
            Gets the CanTimeout property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.ReadTimeout">
            <summary>
            Gets the ReadTimeout property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.WriteTimeout">
            <summary>
            Gets the WriteTimeout property of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.ICoder.Code(System.IO.Stream,System.IO.Stream)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>		
        </member>
        <member name="T:Noemax.Lzma.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:Noemax.Lzma.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="T:Noemax.Lzma.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.PosStateBits">
            <summary>
            Specifies number of postion state bits for LZMA <![CDATA[(0 <= x <= 4)]]>.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.LitContextBits">
            <summary>
            Specifies number of literal context bits for LZMA <![CDATA[(0 <= x <= 8)]]>.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.LitPosBits">
            <summary>
            Specifies number of literal position bits for LZMA <![CDATA[(0 <= x <= 4)]]>.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:Noemax.Lzma.LzmaMatchFinder">
            <summary>
            Defines the type of match finder to be used by LZMA compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.LzmaMatchFinder.Bt2">
            <summary>
            BinTree2.
            </summary>   
        </member>
        <member name="F:Noemax.Lzma.LzmaMatchFinder.Bt4">
            <summary>
            BinTree4
            </summary>
        </member>
        <member name="T:Noemax.Lzma.LzmaSettings">
            <summary>
            Represents the LZMA compression algorithm settings.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaSettings.ToString">
            <summary>
            Represents the LzmaEncoderSettings object as string.
            </summary>
            <returns>
            The string representing the LzmaEncoderSettings.
            </returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaSettings.#ctor">
            <summary>
            Creates a new intance of LzmaEncoderSettings class. 
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.MatchFinder">
            <summary>
            Gets and sets the type of match finder to be used by LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.PosStateBits">
            <summary>
            Gets and sets PosStateBits setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.LitContextBits">
            <summary>
            Gets and sets LitContextBits setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.LitPosBits">
            <summary>
            Gets and sets LitContextBits setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.NumFastBytes">
            <summary>
            Gets and sets the NumFastBytes setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.Dictionary">
            <summary>
            Gets and set the LZMA algorithm dictionary size.
            </summary>
            <remarks>
            Setting this value to a bigger number can improve compactness but will result in higher memory
            consumption.
            </remarks>
        </member>
        <member name="T:Noemax.Lzma.LzmaFactory">
            <summary>
            Provides a factory  for creating a LZMA compression/decompression streams.
            </summary>    
            <remarks>
            Factory also performs caching of LZMA processing related resources to speed up creation of new 
            compression/decompression streams.
            </remarks>
        </member>
        <member name="M:Noemax.Lzma.LzmaFactory.#ctor(System.Int32)">
            <summary>
            Creates a new instance of LzmaFactory.
            </summary>
            <param name="compressionLevel">The level of compression to be used by the compression streams streams created by the factory.</param>
            <remarks>
            <para>
            The level of compression defines the configuration of encoders used by the factory. Since factory reusing encoders to 
            speed up creation of compression streams, the compression level cannot be changed and is specified only once during factory construction.
            </para>
            <para>
            All encoders created by the factory will apply the same compression level.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.Lzma.LzmaFactory.CreateEncodingStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new compression stream for specified output stream into which compressed data will be written.
            </summary>
            <param name="output">The stream to write compressed data.</param>
            <param name="leaveOpen">If true, the output stream is left open when the compression stream is closed.</param>
            <returns>The compression stream that writes compressed data into the specified output stream.</returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaFactory.CreateDecodingStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates the stream for decompressing the compressed data from the specified input stream.
            </summary>
            <param name="input">The input stream from which to read compressed data.</param>
            <param name="leaveOpen">If true, the input stream is left open when decompressing stream is closed.</param>
            <returns>The stream to decompress the data from the input stream.</returns>
        </member>
        <member name="P:Noemax.Lzma.LzmaFactory.CompressionLevel">
            <summary>
            The level of compression being used by encoders provided by the factory. 
            </summary>
            <value>The level of compression being used by encoders provided by the factory.</value>
            <remarks>
            The level of compression is specified when the factory is constructed and cannot be changed later.
            </remarks>
        </member>
        <member name="T:Noemax.Lzma.LzmaInputStream">
            <summary>
            Provides methods and properties to decompress streams compressed by LZMA compression algorithm.
            </summary>
            <remarks>
            <para>By default, LzmaInputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %LzmaInputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>
            <overloads>
            Initializes a new instance of %LzmaInputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %LzmaInputStream%.
            </summary>
            <param name="fileName">The path to the file from which the compressed data will be read.</param>        
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of %LzmaInputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
            <param name="expectLzmaFileHeader">Specifies whether the stream is expected to contain the LZMA file header.</param> 
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Flush">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the data from compressed stream and decompresses it into specified buffer. 
            </summary>
            <param name="buffer">The buffer where to store dompressed bytes.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
            <param name="offset">Not supported.</param>
            <param name="origin">Not supported.</param>
            <returns>Not supported.</returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.SetLength(System.Int64)">
            <summary>
            Not supported. 
            </summary>
            <param name="value">Not supported. </param>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported. 
            </summary>
            <param name="buffer">Not supported.</param>
            <param name="offset">Not supported.</param>
            <param name="count">Not supported.</param>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanRead">
            <summary>
            Returns true. This stream can read.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanSeek">
            <summary>
            Returns false. This stream cannot seek possition.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanWrite">
            <summary>
            Returns false. This stream cannot write.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.Length">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.Position">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanTimeout">
            <summary>
            Gets the CanTimeout property of underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>     
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>
        </member>
        <member name="T:Noemax.Lzma.LzmaOutputStream">
            <summary>
            Provides methods and properties to compress streams using LZMA compression algorithm.
            </summary>
            <remarks>
            <para>By default, LzmaOutputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of %LzmaOutputStream%.
            </summary>
            <param name="filename">The path to the file to which the compressed data will be written.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of %LzmaOutputStream%.
            </summary>
            <param name="stream">
            The stream to which compressed data will be written.
            </param>
            <param name="compressionLevel">
            Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.
            </param>
            <overloads>
            Initializes a new instance of %LzmaOutputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of %LzmaOutputStream%.
            </summary>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen">Set to <b>true</b> to leave the underlying stream open after this stream is closed.</param>
            <param name="writeLzmaFileHeader">Set to <b>true</b> to write an LZMa file header into stream; otherwise shorter stream header is used.</param>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses bytes from the specified byte array and writers them into stream.
            </summary>
            <param name="buffer">The buffer containing bytes to compress.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanRead">
            <summary>
            Returns <strong>false</strong>. This stream cannot be read.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanSeek">
            <summary>
            Returns <strong>false</strong>. This stream cannot seek possition.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanWrite">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.Length">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.Position">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanTimeout">
            <summary>
            Gets the CanTimeout property of underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will 
            attempt to read before timing out.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.WriteTimeout">
            <summary>
            Gets or sets a value that determines how long the stream will 
            attempt to read before timing out.
            </summary>
        </member>
    </members>
</doc>
