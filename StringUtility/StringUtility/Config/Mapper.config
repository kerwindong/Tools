<?xml version="1.0"?>
<mapperConfig>
  <!--<mapperFormatter>
<![CDATA[
using System.Collections.Generic;

using English.Site.Business.Domain.Hotels;
using English.Site.Common.Collections.Mapper;
using English.Site.Common.IOC;

using Global.API.IService;

namespace English.Site.Repository.Hotel.Mapper
{{
    [AutoWireup(typeof(IMapper<{0}, {1}>), IocLifeTimeType.Singleton)]
    public class {0}To{1} : BaseMapper<{0}, {1}>
    {{
        public {0}To{1}()
        {{
            OnConvert += Convert;
        }}

        private void Convert({0} source, {1} target)
        {{
            if (source != null)
            {{
                if (target == null) target = new {1}();

{2} 
            }}
        }}
    }}
}}
]]>
  </mapperFormatter>-->
  <mapperFormatter type="C#">
<![CDATA[
public static {1} To{1}(this {0} source)
{{
  var target = default({1});
  
  if (source != null)
  {{
      target = new {1}();

{2}
  }}
  
  return target;
}}
]]>
  </mapperFormatter>
  <mapperFormatter type="Java">
    <![CDATA[
    public class {1}Mapper
    {{
        private {1} source;
    
        public {1}Mapper({1} source)
        {{
            this.source = source;
        }}
        
        public {0} to{0}()
        {{
            {0} target = null;
            
            if (source != null)
            {{
                target = new {0}();
                
{3}
            }}
            
            return target;
        }}
        
        public {1} from({0} target)
        {{
            if (target != null && source != null)
            {{
{2}
            }}
            
            return source;
        }}
    }}
]]>
  </mapperFormatter>
  <mapperFormatter type="JavaClass">
    <![CDATA[
    public class {0}
    {{
{1}
        public {0}Mapper map()
        {{
            return new {0}Mapper(this);
        }}
    }}
]]>
  </mapperFormatter>
  <mapperFormatter type="JavaEnum">
    <![CDATA[
    public enum {0}
    {{
{1}
        private int type;

        private static Map<Integer, {0}> map = new HashMap<Integer, {0}>();

        static
        {{
            for ({0} element : {0}.values())
            {{
                map.put(element.type, element);
            }}
        }}

        {0}(int type)
        {{
            this.type = type;
        }}

        public int get{0}()
        {{
            return type;
        }}

        public static {0} valueOf(int value)
        {{
            return map.get(value);
        }}
    }}
]]>
  </mapperFormatter>
</mapperConfig>
